

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Sun Apr 28 00:07:03 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=3
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    29   000000                     
    30                           ; Generated 12/10/2023 GMT
    31                           ; 
    32                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution. Publication is not required when
    46                           ;        this file is used in an embedded application.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F46K22 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64   000000                     
    65                           	psect	idataCOMRAM
    66   00194C                     __pidataCOMRAM:
    67                           	callstack 0
    68                           
    69                           ;initializer for moveDisplay@F6949
    70   00194C  59                 	db	low STR_2
    71   00194D  5E                 	db	low STR_3
    72   00194E  70                 	db	low STR_4
    73   00194F  6C                 	db	low STR_5
    74   001950  68                 	db	low STR_6
    75   001951  54                 	db	low STR_7
    76   001952  48                 	db	low STR_8
    77   001953  67                 	db	low (STR_1+4)
    78                           
    79                           	psect	smallconst
    80   001000                     __psmallconst:
    81                           	callstack 0
    82   001000  00                 	db	0
    83   001001  6C3C               	dw	27708
    84   001003  3636               	dw	13878
    85   001005                     __end_of_S4:
    86                           	callstack 0
    87   001005  07CF               	dw	1999
    88   001007  B950               	dw	47440
    89   001009                     __end_of_S3:
    90                           	callstack 0
    91   001009  8884               	dw	34948
    92   00100B  3C08               	dw	15368
    93   00100D                     __end_of_S2:
    94                           	callstack 0
    95   00100D  AAAB               	dw	43691
    96   00100F  BE2A               	dw	48682
    97   001011                     __end_of_S1:
    98                           	callstack 0
    99   001011  85A3               	dw	34211
   100   001013  3288               	dw	12936
   101   001015                     __end_of_pio2_1t:
   102                           	callstack 0
   103   001015  0FDA               	dw	4058
   104   001017  3FC9               	dw	16329
   105   001019                     __end_of_pio2_1:
   106                           	callstack 0
   107   001019  F983               	dw	63875
   108   00101B  3F22               	dw	16162
   109   00101D                     __end_of_invpio2:
   110                           	callstack 0
   111   00101D  0000               	dw	0
   112   00101F  3F00               	dw	16128
   113   001021                     __end_of_half:
   114                           	callstack 0
   115   001021  9A17               	dw	39447
   116   001023  37CC               	dw	14284
   117   001025                     __end_of_C3:
   118                           	callstack 0
   119   001025  043F               	dw	1087
   120   001027  BAB6               	dw	47798
   121   001029                     __end_of_C2:
   122                           	callstack 0
   123   001029  AA9F               	dw	43679
   124   00102B  3D2A               	dw	15658
   125   00102D                     __end_of_C1:
   126                           	callstack 0
   127   00102D  0000               	dw	0
   128   00102F  BF00               	dw	48896
   129   001031                     __end_of_C0:
   130                           	callstack 0
   131   001031  0FDB               	dw	4059
   132   001033  40C9               	dw	16585
   133   001035                     __end_of_s4pio2:
   134                           	callstack 0
   135   001035  CBE4               	dw	52196
   136   001037  4096               	dw	16534
   137   001039                     __end_of_s3pio2:
   138                           	callstack 0
   139   001039  0FDB               	dw	4059
   140   00103B  4049               	dw	16457
   141   00103D                     __end_of_s2pio2:
   142                           	callstack 0
   143   00103D  0FDB               	dw	4059
   144   00103F  3FC9               	dw	16329
   145   001041                     __end_of_s1pio2:
   146                           	callstack 0
   147   000000                     _TRISBbits	set	3987
   148   000000                     _SSP2STATbits	set	3949
   149   000000                     _SSP2ADD	set	3950
   150   000000                     _TX1IF	set	31988
   151   000000                     _GODONE	set	32273
   152   000000                     _ANSELBbits	set	3897
   153   000000                     _ANSELDbits	set	3899
   154   000000                     _PORTAbits	set	3968
   155   000000                     _PORTCbits	set	3970
   156   000000                     _ANSELAbits	set	3896
   157   000000                     _TRISAbits	set	3986
   158   000000                     _TRISCbits	set	3988
   159   000000                     _TRISDbits	set	3989
   160   000000                     _SSP1IF	set	31987
   161   000000                     _SSP2IF	set	32039
   162   000000                     _LATAbits	set	3977
   163   000000                     _SSP2CON2bits	set	3947
   164   000000                     _SSP2CON1bits	set	3948
   165   000000                     _LATBbits	set	3978
   166   000000                     _SSP2BUF	set	3951
   167   000000                     _RCSTA1bits	set	4011
   168   000000                     _SPBRG1	set	4015
   169   000000                     _ADCON2bits	set	4032
   170   000000                     _SSP1CON1bits	set	4038
   171   000000                     _SSP1BUF	set	4041
   172   000000                     _SSP1STATbits	set	4039
   173   000000                     _ADCON0bits	set	4034
   174   000000                     _ADRESH	set	4036
   175   000000                     _TXREG1	set	4013
   176   000000                     _TXSTA1bits	set	4012
   177   001041                     STR_12:
   178   001041  28                 	db	40
   179   001042  6E                 	db	110	;'n'
   180   001043  75                 	db	117	;'u'
   181   001044  6C                 	db	108	;'l'
   182   001045  6C                 	db	108	;'l'
   183   001046  29                 	db	41
   184   001047  00                 	db	0
   185   001048                     STR_8:
   186   001048  4D                 	db	77	;'M'
   187   001049  55                 	db	85	;'U'
   188   00104A  53                 	db	83	;'S'
   189   00104B  49                 	db	73	;'I'
   190   00104C  43                 	db	67	;'C'
   191   00104D  00                 	db	0
   192   00104E                     STR_10:
   193   00104E  3E                 	db	62	;'>'
   194   00104F  25                 	db	37
   195   001050  2D                 	db	45
   196   001051  2A                 	db	42
   197   001052  73                 	db	115	;'s'
   198   001053  00                 	db	0
   199   001054                     STR_7:
   200   001054  47                 	db	71	;'G'
   201   001055  41                 	db	65	;'A'
   202   001056  4D                 	db	77	;'M'
   203   001057  45                 	db	69	;'E'
   204   001058  00                 	db	0
   205   001059                     STR_2:
   206   001059  47                 	db	71	;'G'
   207   00105A  50                 	db	80	;'P'
   208   00105B  49                 	db	73	;'I'
   209   00105C  4F                 	db	79	;'O'
   210   00105D  00                 	db	0
   211   00105E                     STR_3:
   212   00105E  55                 	db	85	;'U'
   213   00105F  41                 	db	65	;'A'
   214   001060  52                 	db	82	;'R'
   215   001061  54                 	db	84	;'T'
   216   001062  00                 	db	0
   217   001063                     STR_1:
   218   001063  25                 	db	37
   219   001064  64                 	db	100	;'d'
   220   001065  20                 	db	32
   221   001066  0D                 	db	13
   222   001067  00                 	db	0
   223   001068                     STR_6:
   224   001068  44                 	db	68	;'D'
   225   001069  41                 	db	65	;'A'
   226   00106A  43                 	db	67	;'C'
   227   00106B  00                 	db	0
   228   00106C                     STR_5:
   229   00106C  41                 	db	65	;'A'
   230   00106D  44                 	db	68	;'D'
   231   00106E  43                 	db	67	;'C'
   232   00106F  00                 	db	0
   233   001070                     STR_4:
   234   001070  50                 	db	80	;'P'
   235   001071  57                 	db	87	;'W'
   236   001072  4D                 	db	77	;'M'
   237   001073  00                 	db	0
   238   001074  00                 	db	0	; dummy byte at the end
   239   000000                     
   240                           ; #config settings
   241                           
   242                           	psect	cinit
   243   001830                     __pcinit:
   244                           	callstack 0
   245   001830                     start_initialization:
   246                           	callstack 0
   247   001830                     __initialization:
   248                           	callstack 0
   249                           
   250                           ; Initialize objects allocated to COMRAM (8 bytes)
   251                           ; load TBLPTR registers with __pidataCOMRAM
   252   001830  0E4C               	movlw	low __pidataCOMRAM
   253   001832  6EF6               	movwf	tblptrl,c
   254   001834  0E19               	movlw	high __pidataCOMRAM
   255   001836  6EF7               	movwf	tblptrh,c
   256   001838  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   257   00183A  6EF8               	movwf	tblptru,c
   258   00183C  EE00  F04A         	lfsr	0,__pdataCOMRAM
   259   001840  EE10 F008          	lfsr	1,8
   260   001844                     copy_data0:
   261   001844  0009               	tblrd		*+
   262   001846  CFF5 FFEE          	movff	tablat,postinc0
   263   00184A  50E5               	movf	postdec1,w,c
   264   00184C  50E1               	movf	fsr1l,w,c
   265   00184E  E1FA               	bnz	copy_data0
   266                           
   267                           ; Clear objects allocated to BANK0 (32 bytes)
   268   001850  EE00  F08B         	lfsr	0,__pbssBANK0
   269   001854  0E20               	movlw	32
   270   001856                     clear_0:
   271   001856  6AEE               	clrf	postinc0,c
   272   001858  06E8               	decf	wreg,f,c
   273   00185A  E1FD               	bnz	clear_0
   274                           
   275                           ; Clear objects allocated to COMRAM (13 bytes)
   276   00185C  EE00  F03D         	lfsr	0,__pbssCOMRAM
   277   001860  0E0D               	movlw	13
   278   001862                     clear_1:
   279   001862  6AEE               	clrf	postinc0,c
   280   001864  06E8               	decf	wreg,f,c
   281   001866  E1FD               	bnz	clear_1
   282   001868                     end_of_initialization:
   283                           	callstack 0
   284   001868                     __end_of__initialization:
   285                           	callstack 0
   286   001868  0E00               	movlw	low (__Lmediumconst shr (0+16))
   287   00186A  6EF8               	movwf	tblptru,c
   288   00186C  0100               	movlb	0
   289   00186E  EFBD  F00A         	goto	_main	;jump to C main() function
   290                           
   291                           	psect	bssCOMRAM
   292   00003D                     __pbssCOMRAM:
   293                           	callstack 0
   294   00003D                     	ds	4
   295   000041                     	ds	4
   296   000045                     _width:
   297                           	callstack 0
   298   000045                     	ds	2
   299   000047                     _prec:
   300                           	callstack 0
   301   000047                     	ds	2
   302   000049                     _flags:
   303                           	callstack 0
   304   000049                     	ds	1
   305                           
   306                           	psect	dataCOMRAM
   307   00004A                     __pdataCOMRAM:
   308                           	callstack 0
   309   00004A                     moveDisplay@F6949:
   310                           	callstack 0
   311   00004A                     	ds	8
   312                           
   313                           	psect	bssBANK0
   314   00008B                     __pbssBANK0:
   315                           	callstack 0
   316   00008B                     	ds	32
   317                           
   318                           	psect	cstackBANK0
   319   000060                     __pcstackBANK0:
   320                           	callstack 0
   321   000060                     moveDisplay@menuItem1:
   322                           	callstack 0
   323                           
   324                           ; 17 bytes @ 0x0
   325   000060                     	ds	17
   326   000071                     moveDisplay@menuItem2:
   327                           	callstack 0
   328                           
   329                           ; 17 bytes @ 0x11
   330   000071                     	ds	17
   331   000082                     moveDisplay@menuItems:
   332                           	callstack 0
   333                           
   334                           ; 8 bytes @ 0x22
   335   000082                     	ds	8
   336   00008A                     moveDisplay@menuI:
   337                           	callstack 0
   338                           
   339                           ; 1 bytes @ 0x2A
   340   00008A                     	ds	1
   341                           
   342                           	psect	cstackCOMRAM
   343   000001                     __pcstackCOMRAM:
   344                           	callstack 0
   345   000001                     ?___wmul:
   346                           	callstack 0
   347   000001                     LCD_Send@data:
   348                           	callstack 0
   349   000001                     putch@data:
   350                           	callstack 0
   351   000001                     ___wmul@multiplier:
   352                           	callstack 0
   353                           
   354                           ; 2 bytes @ 0x0
   355   000001                     	ds	1
   356   000002                     ??_LCD_Init:
   357   000002                     LCD_ShowString@textData:
   358                           	callstack 0
   359   000002                     fputc@c:
   360                           	callstack 0
   361                           
   362                           ; 2 bytes @ 0x1
   363   000002                     	ds	1
   364   000003                     LCD_ShowString@lineNum:
   365                           	callstack 0
   366   000003                     ___wmul@multiplicand:
   367                           	callstack 0
   368                           
   369                           ; 2 bytes @ 0x2
   370   000003                     	ds	1
   371   000004                     LCD_ShowString@i:
   372                           	callstack 0
   373   000004                     fputc@fp:
   374                           	callstack 0
   375                           
   376                           ; 2 bytes @ 0x3
   377   000004                     	ds	1
   378   000005                     ___wmul@product:
   379                           	callstack 0
   380                           
   381                           ; 2 bytes @ 0x4
   382   000005                     	ds	1
   383   000006                     ??_fputc:
   384                           
   385                           ; 1 bytes @ 0x5
   386   000006                     	ds	1
   387   000007                     ?_read_prec_or_width:
   388                           	callstack 0
   389   000007                     read_prec_or_width@fmt:
   390                           	callstack 0
   391                           
   392                           ; 1 bytes @ 0x6
   393   000007                     	ds	1
   394   000008                     read_prec_or_width@ap:
   395                           	callstack 0
   396                           
   397                           ; 1 bytes @ 0x7
   398   000008                     	ds	1
   399   000009                     read_prec_or_width@c:
   400                           	callstack 0
   401                           
   402                           ; 1 bytes @ 0x8
   403   000009                     	ds	1
   404   00000A                     read_prec_or_width@n:
   405                           	callstack 0
   406                           
   407                           ; 2 bytes @ 0x9
   408   00000A                     	ds	1
   409   00000B                     stoa@fp:
   410                           	callstack 0
   411                           
   412                           ; 2 bytes @ 0xA
   413   00000B                     	ds	2
   414   00000D                     stoa@s:
   415                           	callstack 0
   416                           
   417                           ; 2 bytes @ 0xC
   418   00000D                     	ds	2
   419   00000F                     ??_stoa:
   420                           
   421                           ; 1 bytes @ 0xE
   422   00000F                     	ds	2
   423   000011                     stoa@p:
   424                           	callstack 0
   425                           
   426                           ; 2 bytes @ 0x10
   427   000011                     	ds	2
   428   000013                     stoa@w:
   429                           	callstack 0
   430                           
   431                           ; 2 bytes @ 0x12
   432   000013                     	ds	2
   433   000015                     stoa@cp:
   434                           	callstack 0
   435                           
   436                           ; 2 bytes @ 0x14
   437   000015                     	ds	2
   438   000017                     stoa@l:
   439                           	callstack 0
   440                           
   441                           ; 2 bytes @ 0x16
   442   000017                     	ds	2
   443   000019                     vfpfcnvrt@fp:
   444                           	callstack 0
   445                           
   446                           ; 2 bytes @ 0x18
   447   000019                     	ds	2
   448   00001B                     vfpfcnvrt@fmt:
   449                           	callstack 0
   450                           
   451                           ; 1 bytes @ 0x1A
   452   00001B                     	ds	1
   453   00001C                     vfpfcnvrt@ap:
   454                           	callstack 0
   455                           
   456                           ; 1 bytes @ 0x1B
   457   00001C                     	ds	1
   458   00001D                     ??_vfpfcnvrt:
   459                           
   460                           ; 1 bytes @ 0x1C
   461   00001D                     	ds	1
   462   00001E                     vfpfcnvrt@done:
   463                           	callstack 0
   464                           
   465                           ; 1 bytes @ 0x1D
   466   00001E                     	ds	1
   467   00001F                     ?_vfprintf:
   468                           	callstack 0
   469   00001F                     vfprintf@fp:
   470                           	callstack 0
   471                           
   472                           ; 2 bytes @ 0x1E
   473   00001F                     	ds	2
   474   000021                     vfprintf@fmt:
   475                           	callstack 0
   476                           
   477                           ; 1 bytes @ 0x20
   478   000021                     	ds	1
   479   000022                     vfprintf@ap:
   480                           	callstack 0
   481                           
   482                           ; 1 bytes @ 0x21
   483   000022                     	ds	1
   484   000023                     vfprintf@cfmt:
   485                           	callstack 0
   486                           
   487                           ; 1 bytes @ 0x22
   488   000023                     	ds	1
   489   000024                     ?_sprintf:
   490                           	callstack 0
   491   000024                     sprintf@s:
   492                           	callstack 0
   493                           
   494                           ; 1 bytes @ 0x23
   495   000024                     	ds	1
   496   000025                     sprintf@fmt:
   497                           	callstack 0
   498                           
   499                           ; 1 bytes @ 0x24
   500   000025                     	ds	5
   501   00002A                     sprintf@ap:
   502                           	callstack 0
   503                           
   504                           ; 1 bytes @ 0x29
   505   00002A                     	ds	1
   506   00002B                     sprintf@f:
   507                           	callstack 0
   508                           
   509                           ; 12 bytes @ 0x2A
   510   00002B                     	ds	12
   511   000037                     moveDisplay@where:
   512                           	callstack 0
   513                           
   514                           ; 1 bytes @ 0x36
   515   000037                     	ds	1
   516   000038                     ??_moveDisplay:
   517                           
   518                           ; 1 bytes @ 0x37
   519   000038                     	ds	2
   520   00003A                     ??_main:
   521                           
   522                           ; 1 bytes @ 0x39
   523   00003A                     	ds	2
   524   00003C                     main@menuI:
   525                           	callstack 0
   526                           
   527                           ; 1 bytes @ 0x3B
   528   00003C                     	ds	1
   529                           
   530 ;;
   531 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   532 ;;
   533 ;; *************** function _main *****************
   534 ;; Defined at:
   535 ;;		line 10 in file "main.c"
   536 ;; Parameters:    Size  Location     Type
   537 ;;		None
   538 ;; Auto vars:     Size  Location     Type
   539 ;;  menuI           1   59[COMRAM] unsigned char 
   540 ;; Return value:  Size  Location     Type
   541 ;;                  1    wreg      void 
   542 ;; Registers used:
   543 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   544 ;; Tracked objects:
   545 ;;		On entry : 0/0
   546 ;;		On exit  : 0/0
   547 ;;		Unchanged: 0/0
   548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   550 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   551 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   552 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   553 ;;Total ram usage:        3 bytes
   554 ;; Hardware stack levels required when called: 7
   555 ;; This function calls:
   556 ;;		_LCD_Init
   557 ;;		_moveDisplay
   558 ;; This function is called by:
   559 ;;		Startup code after reset
   560 ;; This function uses a non-reentrant model
   561 ;;
   562                           
   563                           	psect	text0
   564   00157A                     __ptext0:
   565                           	callstack 0
   566   00157A                     _main:
   567                           	callstack 24
   568   00157A                     
   569                           ;main.c: 12:     TRISCbits.RC0 = 1;
   570   00157A  8094               	bsf	148,0,c	;volatile
   571                           
   572                           ;main.c: 13:     TRISAbits.RA4 = 1;
   573   00157C  8892               	bsf	146,4,c	;volatile
   574                           
   575                           ;main.c: 14:     TRISAbits.RA3 = 1;
   576   00157E  8692               	bsf	146,3,c	;volatile
   577                           
   578                           ;main.c: 15:     TRISAbits.RA2 = 1;
   579   001580  8492               	bsf	146,2,c	;volatile
   580                           
   581                           ;main.c: 16:     ANSELAbits.ANSA3 = 0;
   582   001582  010F               	movlb	15	; () banked
   583   001584  9738               	bcf	56,3,b	;volatile
   584                           
   585                           ;main.c: 17:     ANSELAbits.ANSA2 = 0;
   586   001586  9538               	bcf	56,2,b	;volatile
   587   001588                     
   588                           ; BSR set to: 15
   589                           ;main.c: 20:     LCD_Init();
   590   001588  EC50  F00A         	call	_LCD_Init	;wreg free
   591   00158C                     
   592                           ;main.c: 21:     uint8_t menuI = 0;
   593   00158C  0E00               	movlw	0
   594   00158E  6E3C               	movwf	main@menuI^0,c
   595   001590                     
   596                           ;main.c: 24:     moveDisplay(menuI,0);
   597   001590  0E00               	movlw	0
   598   001592  6E37               	movwf	moveDisplay@where^0,c
   599   001594  0E00               	movlw	0
   600   001596  ECDE  F009         	call	_moveDisplay
   601   00159A                     l1640:
   602                           
   603                           ;main.c: 27:         if(PORTCbits.RC0){
   604   00159A  A082               	btfss	130,0,c	;volatile
   605   00159C  EFD2  F00A         	goto	u931
   606   0015A0  EFD4  F00A         	goto	u930
   607   0015A4                     u931:
   608   0015A4  EFF4  F00A         	goto	l1650
   609   0015A8                     u930:
   610   0015A8                     
   611                           ;main.c: 28:             _delay((unsigned long)((50)*(32E6/4000.0)));
   612   0015A8  0E03               	movlw	3
   613   0015AA  6E3B               	movwf	(??_main+1)^0,c
   614   0015AC  0E08               	movlw	8
   615   0015AE  6E3A               	movwf	??_main^0,c
   616   0015B0  0E77               	movlw	119
   617   0015B2                     u1017:
   618   0015B2  2EE8               	decfsz	wreg,f,c
   619   0015B4  D7FE               	bra	u1017
   620   0015B6  2E3A               	decfsz	??_main^0,f,c
   621   0015B8  D7FC               	bra	u1017
   622   0015BA  2E3B               	decfsz	(??_main+1)^0,f,c
   623   0015BC  D7FA               	bra	u1017
   624   0015BE  0000               	nop	
   625   0015C0                     
   626                           ;main.c: 29:             if(PORTCbits.RC0){
   627   0015C0  A082               	btfss	130,0,c	;volatile
   628   0015C2  EFE5  F00A         	goto	u941
   629   0015C6  EFE7  F00A         	goto	u940
   630   0015CA                     u941:
   631   0015CA  EFF4  F00A         	goto	l1650
   632   0015CE                     u940:
   633   0015CE                     l24:
   634   0015CE  B082               	btfsc	130,0,c	;volatile
   635   0015D0  EFEC  F00A         	goto	u951
   636   0015D4  EFEE  F00A         	goto	u950
   637   0015D8                     u951:
   638   0015D8  EFE7  F00A         	goto	l24
   639   0015DC                     u950:
   640   0015DC                     
   641                           ;main.c: 31:                 menuI = moveDisplay(menuI,2);
   642   0015DC  0E02               	movlw	2
   643   0015DE  6E37               	movwf	moveDisplay@where^0,c
   644   0015E0  503C               	movf	main@menuI^0,w,c
   645   0015E2  ECDE  F009         	call	_moveDisplay
   646   0015E6  6E3C               	movwf	main@menuI^0,c
   647   0015E8                     l1650:
   648                           
   649                           ;main.c: 34:         if(PORTAbits.RA4){
   650   0015E8  A880               	btfss	128,4,c	;volatile
   651   0015EA  EFF9  F00A         	goto	u961
   652   0015EE  EFFB  F00A         	goto	u960
   653   0015F2                     u961:
   654   0015F2  EF1B  F00B         	goto	l1660
   655   0015F6                     u960:
   656   0015F6                     
   657                           ;main.c: 35:             _delay((unsigned long)((50)*(32E6/4000.0)));
   658   0015F6  0E03               	movlw	3
   659   0015F8  6E3B               	movwf	(??_main+1)^0,c
   660   0015FA  0E08               	movlw	8
   661   0015FC  6E3A               	movwf	??_main^0,c
   662   0015FE  0E77               	movlw	119
   663   001600                     u1027:
   664   001600  2EE8               	decfsz	wreg,f,c
   665   001602  D7FE               	bra	u1027
   666   001604  2E3A               	decfsz	??_main^0,f,c
   667   001606  D7FC               	bra	u1027
   668   001608  2E3B               	decfsz	(??_main+1)^0,f,c
   669   00160A  D7FA               	bra	u1027
   670   00160C  0000               	nop	
   671   00160E                     
   672                           ;main.c: 36:             if(PORTAbits.RA4){
   673   00160E  A880               	btfss	128,4,c	;volatile
   674   001610  EF0C  F00B         	goto	u971
   675   001614  EF0E  F00B         	goto	u970
   676   001618                     u971:
   677   001618  EF1B  F00B         	goto	l1660
   678   00161C                     u970:
   679   00161C                     l29:
   680   00161C  B880               	btfsc	128,4,c	;volatile
   681   00161E  EF13  F00B         	goto	u981
   682   001622  EF15  F00B         	goto	u980
   683   001626                     u981:
   684   001626  EF0E  F00B         	goto	l29
   685   00162A                     u980:
   686   00162A                     
   687                           ;main.c: 38:                 menuI = moveDisplay(menuI,1);
   688   00162A  0E01               	movlw	1
   689   00162C  6E37               	movwf	moveDisplay@where^0,c
   690   00162E  503C               	movf	main@menuI^0,w,c
   691   001630  ECDE  F009         	call	_moveDisplay
   692   001634  6E3C               	movwf	main@menuI^0,c
   693   001636                     l1660:
   694                           
   695                           ;main.c: 41:         if(PORTAbits.RA3){
   696   001636  5080               	movf	128,w,c	;volatile
   697   001638                     
   698                           ;main.c: 44:         if(PORTAbits.RA2){
   699   001638  5080               	movf	128,w,c	;volatile
   700   00163A  EFCD  F00A         	goto	l1640
   701   00163E  EF00  F000         	goto	start
   702   001642                     __end_of_main:
   703                           	callstack 0
   704                           
   705 ;; *************** function _moveDisplay *****************
   706 ;; Defined at:
   707 ;;		line 11 in file "menu.c"
   708 ;; Parameters:    Size  Location     Type
   709 ;;  menuI           1    wreg     unsigned char 
   710 ;;  where           1   54[COMRAM] unsigned char 
   711 ;; Auto vars:     Size  Location     Type
   712 ;;  menuI           1   42[BANK0 ] unsigned char 
   713 ;;  menuItem2      17   17[BANK0 ] unsigned char [17]
   714 ;;  menuItem1      17    0[BANK0 ] unsigned char [17]
   715 ;;  menuItems       8   34[BANK0 ] PTR unsigned char [8]
   716 ;;		 -> STR_9(1), STR_8(6), STR_7(5), STR_6(4), 
   717 ;;		 -> STR_5(4), STR_4(4), STR_3(5), STR_2(5), 
   718 ;; Return value:  Size  Location     Type
   719 ;;                  1    wreg      unsigned char 
   720 ;; Registers used:
   721 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   722 ;; Tracked objects:
   723 ;;		On entry : 0/0
   724 ;;		On exit  : 0/0
   725 ;;		Unchanged: 0/0
   726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   727 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   728 ;;      Locals:         0      43       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   729 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   730 ;;      Totals:         3      43       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   731 ;;Total ram usage:       46 bytes
   732 ;; Hardware stack levels used: 1
   733 ;; Hardware stack levels required when called: 6
   734 ;; This function calls:
   735 ;;		_LCD_ShowString
   736 ;;		_sprintf
   737 ;; This function is called by:
   738 ;;		_main
   739 ;; This function uses a non-reentrant model
   740 ;;
   741                           
   742                           	psect	text1
   743   0013BC                     __ptext1:
   744                           	callstack 0
   745   0013BC                     _moveDisplay:
   746                           	callstack 24
   747                           
   748                           ;incstack = 0
   749                           ;moveDisplay@menuI stored from wreg
   750   0013BC  0100               	movlb	0	; () banked
   751   0013BE  6F8A               	movwf	moveDisplay@menuI& (0+255),b
   752   0013C0                     
   753                           ;menu.c: 12:     char* menuItems[] = {"GPIO", "UART", "PWM", "ADC", "DAC", "GAME", "MUSI
      +                          C", ""};
   754   0013C0  EE20  F04A         	lfsr	2,moveDisplay@F6949
   755   0013C4  EE10  F082         	lfsr	1,moveDisplay@menuItems
   756   0013C8  0E07               	movlw	7
   757   0013CA                     u901:
   758   0013CA  CFDB FFE3          	movff	plusw2,plusw1
   759   0013CE  06E8               	decf	wreg,f,c
   760   0013D0  E2FC               	bc	u901
   761                           
   762                           ;menu.c: 13:     switch (where){
   763   0013D2  EF03  F00A         	goto	l1620
   764   0013D6                     l1610:
   765                           
   766                           ;menu.c: 17:             if(menuI<6){
   767   0013D6  0E06               	movlw	6
   768   0013D8  0100               	movlb	0	; () banked
   769   0013DA  618A               	cpfslt	moveDisplay@menuI& (0+255),b
   770   0013DC  EFF2  F009         	goto	u911
   771   0013E0  EFF4  F009         	goto	u910
   772   0013E4                     u911:
   773   0013E4  EF12  F00A         	goto	l1622
   774   0013E8                     u910:
   775   0013E8                     
   776                           ; BSR set to: 0
   777                           ;menu.c: 18:             menuI++;
   778   0013E8  2B8A               	incf	moveDisplay@menuI& (0+255),f,b
   779   0013EA  EF12  F00A         	goto	l1622
   780   0013EE                     l1614:
   781                           
   782                           ;menu.c: 22:             if(menuI>0){
   783   0013EE  0100               	movlb	0	; () banked
   784   0013F0  518A               	movf	moveDisplay@menuI& (0+255),w,b
   785   0013F2  B4D8               	btfsc	status,2,c
   786   0013F4  EFFE  F009         	goto	u921
   787   0013F8  EF00  F00A         	goto	u920
   788   0013FC                     u921:
   789   0013FC  EF12  F00A         	goto	l1622
   790   001400                     u920:
   791   001400                     
   792                           ; BSR set to: 0
   793                           ;menu.c: 23:             menuI--;
   794   001400  078A               	decf	moveDisplay@menuI& (0+255),f,b
   795   001402  EF12  F00A         	goto	l1622
   796   001406                     l1620:
   797   001406  5037               	movf	moveDisplay@where^0,w,c
   798                           
   799                           ; Switch size 1, requested type "simple"
   800                           ; Number of cases is 3, Range of values is 0 to 2
   801                           ; switch strategies available:
   802                           ; Name         Instructions Cycles
   803                           ; simple_byte           10     6 (average)
   804                           ;	Chosen strategy is simple_byte
   805   001408  0A00               	xorlw	0	; case 0
   806   00140A  B4D8               	btfsc	status,2,c
   807   00140C  EF12  F00A         	goto	l1622
   808   001410  0A01               	xorlw	1	; case 1
   809   001412  B4D8               	btfsc	status,2,c
   810   001414  EFEB  F009         	goto	l1610
   811   001418  0A03               	xorlw	3	; case 2
   812   00141A  B4D8               	btfsc	status,2,c
   813   00141C  EFF7  F009         	goto	l1614
   814   001420  EF12  F00A         	goto	l1622
   815   001424                     l1622:
   816                           
   817                           ;menu.c: 27:     char menuItem1[17];;menu.c: 28:     char menuItem2[17];;menu.c: 29:    
      +                           sprintf(menuItem1, ">%-*s", 15, menuItems[menuI]);
   818   001424  0E60               	movlw	low moveDisplay@menuItem1
   819   001426  6E24               	movwf	sprintf@s^0,c
   820   001428  0E4E               	movlw	low STR_10
   821   00142A  6E25               	movwf	sprintf@fmt^0,c
   822   00142C  0E00               	movlw	0
   823   00142E  6E27               	movwf	(?_sprintf+3)^0,c
   824   001430  0E0F               	movlw	15
   825   001432  6E26               	movwf	(?_sprintf+2)^0,c
   826   001434  0100               	movlb	0	; () banked
   827   001436  518A               	movf	moveDisplay@menuI& (0+255),w,b
   828   001438  0F82               	addlw	low moveDisplay@menuItems
   829   00143A  6ED9               	movwf	fsr2l,c
   830   00143C  6ADA               	clrf	fsr2h,c
   831   00143E  50DF               	movf	indf2,w,c
   832   001440  6E38               	movwf	??_moveDisplay^0,c
   833   001442  C038  F028         	movff	??_moveDisplay,?_sprintf+4
   834   001446  5028               	movf	(?_sprintf+4)^0,w,c
   835   001448  A4D8               	btfss	status,2,c
   836   00144A  0E10               	movlw	high __smallconst
   837   00144C  6E29               	movwf	(?_sprintf+5)^0,c
   838   00144E  EC5A  F00C         	call	_sprintf	;wreg free
   839                           
   840                           ;menu.c: 30:     sprintf(menuItem2, "%-*s", 16, menuItems[menuI+1]);
   841   001452  0E71               	movlw	low moveDisplay@menuItem2
   842   001454  6E24               	movwf	sprintf@s^0,c
   843   001456  0E4F               	movlw	low (STR_10+1)
   844   001458  6E25               	movwf	sprintf@fmt^0,c
   845   00145A  0E00               	movlw	0
   846   00145C  6E27               	movwf	(?_sprintf+3)^0,c
   847   00145E  0E10               	movlw	16
   848   001460  6E26               	movwf	(?_sprintf+2)^0,c
   849   001462  C08A  F038         	movff	moveDisplay@menuI,??_moveDisplay
   850   001466  0E01               	movlw	1
   851   001468  2638               	addwf	??_moveDisplay^0,f,c
   852   00146A  5038               	movf	??_moveDisplay^0,w,c
   853   00146C  0F82               	addlw	low moveDisplay@menuItems
   854   00146E  6ED9               	movwf	fsr2l,c
   855   001470  6ADA               	clrf	fsr2h,c
   856   001472  50DF               	movf	indf2,w,c
   857   001474  6E39               	movwf	(??_moveDisplay+1)^0,c
   858   001476  C039  F028         	movff	??_moveDisplay+1,?_sprintf+4
   859   00147A  5028               	movf	(?_sprintf+4)^0,w,c
   860   00147C  A4D8               	btfss	status,2,c
   861   00147E  0E10               	movlw	high __smallconst
   862   001480  6E29               	movwf	(?_sprintf+5)^0,c
   863   001482  EC5A  F00C         	call	_sprintf	;wreg free
   864   001486                     
   865                           ;menu.c: 31:     LCD_ShowString((char)1, menuItem1);
   866   001486  0E60               	movlw	low moveDisplay@menuItem1
   867   001488  6E02               	movwf	LCD_ShowString@textData^0,c
   868   00148A  0E01               	movlw	1
   869   00148C  ECD1  F00B         	call	_LCD_ShowString
   870   001490                     
   871                           ;menu.c: 32:     LCD_ShowString((char)2, menuItem2);
   872   001490  0E71               	movlw	low moveDisplay@menuItem2
   873   001492  6E02               	movwf	LCD_ShowString@textData^0,c
   874   001494  0E02               	movlw	2
   875   001496  ECD1  F00B         	call	_LCD_ShowString
   876   00149A                     
   877                           ;menu.c: 34:     return menuI;
   878   00149A  0100               	movlb	0	; () banked
   879   00149C  518A               	movf	moveDisplay@menuI& (0+255),w,b
   880   00149E                     
   881                           ; BSR set to: 0
   882   00149E  0012               	return		;funcret
   883   0014A0                     __end_of_moveDisplay:
   884                           	callstack 0
   885                           
   886 ;; *************** function _sprintf *****************
   887 ;; Defined at:
   888 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_sprintf.c"
   889 ;; Parameters:    Size  Location     Type
   890 ;;  s               1   35[COMRAM] PTR unsigned char 
   891 ;;		 -> moveDisplay@menuItem2(17), moveDisplay@menuItem1(17), 
   892 ;;  fmt             1   36[COMRAM] PTR const unsigned char 
   893 ;;		 -> STR_11(5), STR_10(6), 
   894 ;; Auto vars:     Size  Location     Type
   895 ;;  f              12   42[COMRAM] struct _IO_FILE
   896 ;;  ret             2    0        int 
   897 ;;  ap              1   41[COMRAM] PTR void [1]
   898 ;;		 -> ?_printf(2), ?_sprintf(2), 
   899 ;; Return value:  Size  Location     Type
   900 ;;                  2   35[COMRAM] int 
   901 ;; Registers used:
   902 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   903 ;; Tracked objects:
   904 ;;		On entry : 0/0
   905 ;;		On exit  : 0/0
   906 ;;		Unchanged: 0/0
   907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   908 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   909 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   911 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   912 ;;Total ram usage:       19 bytes
   913 ;; Hardware stack levels used: 1
   914 ;; Hardware stack levels required when called: 5
   915 ;; This function calls:
   916 ;;		_vfprintf
   917 ;; This function is called by:
   918 ;;		_moveDisplay
   919 ;; This function uses a non-reentrant model
   920 ;;
   921                           
   922                           	psect	text2
   923   0018B4                     __ptext2:
   924                           	callstack 0
   925   0018B4                     _sprintf:
   926                           	callstack 24
   927   0018B4  0E26               	movlw	low (?_sprintf+2)
   928   0018B6  6E2A               	movwf	sprintf@ap^0,c
   929   0018B8  C024  F02B         	movff	sprintf@s,sprintf@f
   930   0018BC  0E00               	movlw	0
   931   0018BE  6E2F               	movwf	(sprintf@f+4)^0,c
   932   0018C0  0E00               	movlw	0
   933   0018C2  6E2E               	movwf	(sprintf@f+3)^0,c
   934   0018C4  0E00               	movlw	0
   935   0018C6  6E36               	movwf	(sprintf@f+11)^0,c
   936   0018C8  0E00               	movlw	0
   937   0018CA  6E35               	movwf	(sprintf@f+10)^0,c
   938   0018CC  0E2B               	movlw	low sprintf@f
   939   0018CE  6E1F               	movwf	vfprintf@fp^0,c
   940   0018D0  6A20               	clrf	(vfprintf@fp+1)^0,c
   941   0018D2  C025  F021         	movff	sprintf@fmt,vfprintf@fmt
   942   0018D6  0E2A               	movlw	low sprintf@ap
   943   0018D8  6E22               	movwf	vfprintf@ap^0,c
   944   0018DA  EC39  F00C         	call	_vfprintf	;wreg free
   945   0018DE  5024               	movf	sprintf@s^0,w,c
   946   0018E0  242E               	addwf	(sprintf@f+3)^0,w,c
   947   0018E2  6ED9               	movwf	fsr2l,c
   948   0018E4  6ADA               	clrf	fsr2h,c
   949   0018E6  6ADF               	clrf	indf2,c
   950   0018E8  0012               	return		;funcret
   951   0018EA                     __end_of_sprintf:
   952                           	callstack 0
   953                           
   954 ;; *************** function _vfprintf *****************
   955 ;; Defined at:
   956 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
   957 ;; Parameters:    Size  Location     Type
   958 ;;  fp              2   30[COMRAM] PTR struct _IO_FILE
   959 ;;		 -> NULL(0), sprintf@f(12), 
   960 ;;  fmt             1   32[COMRAM] PTR const unsigned char 
   961 ;;		 -> STR_11(5), STR_10(6), STR_1(5), 
   962 ;;  ap              1   33[COMRAM] PTR PTR void 
   963 ;;		 -> printf@ap(1), sprintf@ap(1), 
   964 ;; Auto vars:     Size  Location     Type
   965 ;;  cfmt            1   34[COMRAM] PTR unsigned char 
   966 ;;		 -> STR_11(5), STR_10(6), STR_1(5), 
   967 ;; Return value:  Size  Location     Type
   968 ;;                  2   30[COMRAM] int 
   969 ;; Registers used:
   970 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   971 ;; Tracked objects:
   972 ;;		On entry : 0/0
   973 ;;		On exit  : 0/0
   974 ;;		Unchanged: 0/0
   975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   976 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   977 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   979 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   980 ;;Total ram usage:        5 bytes
   981 ;; Hardware stack levels used: 1
   982 ;; Hardware stack levels required when called: 4
   983 ;; This function calls:
   984 ;;		_vfpfcnvrt
   985 ;; This function is called by:
   986 ;;		_sprintf
   987 ;; This function uses a non-reentrant model
   988 ;;
   989                           
   990                           	psect	text3
   991   001872                     __ptext3:
   992                           	callstack 0
   993   001872                     _vfprintf:
   994                           	callstack 24
   995   001872                     
   996                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
   997   001872  C021  F023         	movff	vfprintf@fmt,vfprintf@cfmt
   998                           
   999                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1000   001876  EF47  F00C         	goto	l1548
  1001   00187A                     l1546:
  1002                           
  1003                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1004   00187A  C01F  F019         	movff	vfprintf@fp,vfpfcnvrt@fp
  1005   00187E  C020  F01A         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1006   001882  0E23               	movlw	low vfprintf@cfmt
  1007   001884  6E1B               	movwf	vfpfcnvrt@fmt^0,c
  1008   001886  C022  F01C         	movff	vfprintf@ap,vfpfcnvrt@ap
  1009   00188A  EC3B  F008         	call	_vfpfcnvrt	;wreg free
  1010   00188E                     l1548:
  1011                           
  1012                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1013   00188E  C023  FFF6         	movff	vfprintf@cfmt,tblptrl
  1014   001892                     	if	1	;There is more than 1 active tblptr byte
  1015   001892  0E10               	movlw	high __smallconst
  1016   001894  6EF7               	movwf	tblptrh,c
  1017   001896                     	endif
  1018   001896                     	if	0	;tblptru may be non-zero
  1019   001896                     	endif
  1020   001896                     	if	0	;tblptru may be non-zero
  1021   001896                     	endif
  1022   001896  0008               	tblrd		*
  1023   001898  50F5               	movf	tablat,w,c
  1024   00189A  0900               	iorlw	0
  1025   00189C  A4D8               	btfss	status,2,c
  1026   00189E  EF53  F00C         	goto	u821
  1027   0018A2  EF55  F00C         	goto	u820
  1028   0018A6                     u821:
  1029   0018A6  EF3D  F00C         	goto	l1546
  1030   0018AA                     u820:
  1031   0018AA                     
  1032                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1033   0018AA  0E00               	movlw	0
  1034   0018AC  6E20               	movwf	(?_vfprintf+1)^0,c
  1035   0018AE  0E00               	movlw	0
  1036   0018B0  6E1F               	movwf	?_vfprintf^0,c
  1037   0018B2  0012               	return		;funcret
  1038   0018B4                     __end_of_vfprintf:
  1039                           	callstack 0
  1040                           
  1041 ;; *************** function _vfpfcnvrt *****************
  1042 ;; Defined at:
  1043 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  1044 ;; Parameters:    Size  Location     Type
  1045 ;;  fp              2   24[COMRAM] PTR struct _IO_FILE
  1046 ;;		 -> NULL(0), sprintf@f(12), 
  1047 ;;  fmt             1   26[COMRAM] PTR PTR unsigned char 
  1048 ;;		 -> vfprintf@cfmt(1), 
  1049 ;;  ap              1   27[COMRAM] PTR PTR void 
  1050 ;;		 -> printf@ap(1), sprintf@ap(1), 
  1051 ;; Auto vars:     Size  Location     Type
  1052 ;;  cp              3    0        PTR unsigned char 
  1053 ;;  done            1   29[COMRAM] _Bool 
  1054 ;;  c               1    0        unsigned char 
  1055 ;; Return value:  Size  Location     Type
  1056 ;;                  1    wreg      void 
  1057 ;; Registers used:
  1058 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1059 ;; Tracked objects:
  1060 ;;		On entry : 0/0
  1061 ;;		On exit  : 0/0
  1062 ;;		Unchanged: 0/0
  1063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1064 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1065 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1066 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1067 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1068 ;;Total ram usage:        6 bytes
  1069 ;; Hardware stack levels used: 1
  1070 ;; Hardware stack levels required when called: 3
  1071 ;; This function calls:
  1072 ;;		_fputc
  1073 ;;		_read_prec_or_width
  1074 ;;		_stoa
  1075 ;; This function is called by:
  1076 ;;		_vfprintf
  1077 ;; This function uses a non-reentrant model
  1078 ;;
  1079                           
  1080                           	psect	text4
  1081   001076                     __ptext4:
  1082                           	callstack 0
  1083   001076                     _vfpfcnvrt:
  1084                           	callstack 24
  1085   001076                     
  1086                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1087   001076  501B               	movf	vfpfcnvrt@fmt^0,w,c
  1088   001078  6ED9               	movwf	fsr2l,c
  1089   00107A  6ADA               	clrf	fsr2h,c
  1090   00107C  CFDF FFF6          	movff	indf2,tblptrl
  1091   001080                     	if	1	;There is more than 1 active tblptr byte
  1092   001080  0E10               	movlw	high __smallconst
  1093   001082  6EF7               	movwf	tblptrh,c
  1094   001084                     	endif
  1095   001084                     	if	0	;tblptru may be non-zero
  1096   001084                     	endif
  1097   001084                     	if	0	;tblptru may be non-zero
  1098   001084                     	endif
  1099   001084  0008               	tblrd		*
  1100   001086  50F5               	movf	tablat,w,c
  1101   001088  0A25               	xorlw	37
  1102   00108A  A4D8               	btfss	status,2,c
  1103   00108C  EF4A  F008         	goto	u721
  1104   001090  EF4C  F008         	goto	u720
  1105   001094                     u721:
  1106   001094  EF13  F009         	goto	l1536
  1107   001098                     u720:
  1108   001098                     
  1109                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1110   001098  501B               	movf	vfpfcnvrt@fmt^0,w,c
  1111   00109A  6ED9               	movwf	fsr2l,c
  1112   00109C  6ADA               	clrf	fsr2h,c
  1113   00109E  2ADF               	incf	indf2,f,c
  1114   0010A0                     
  1115                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1116   0010A0  0E00               	movlw	0
  1117   0010A2  6E46               	movwf	(_width+1)^0,c
  1118   0010A4  0E00               	movlw	0
  1119   0010A6  6E45               	movwf	_width^0,c
  1120   0010A8  C045  F049         	movff	_width,_flags
  1121   0010AC                     
  1122                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1123   0010AC  6847               	setf	_prec^0,c
  1124   0010AE  6848               	setf	(_prec+1)^0,c
  1125   0010B0                     
  1126                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  1127   0010B0  0E00               	movlw	0
  1128   0010B2  6E1E               	movwf	vfpfcnvrt@done^0,c
  1129                           
  1130                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1131   0010B4  EF76  F008         	goto	l1500
  1132   0010B8                     l1490:
  1133                           
  1134                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1214:            
      +                                   flags |= (1 << 0);
  1135   0010B8  8049               	bsf	_flags^0,0,c
  1136   0010BA                     
  1137                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1215:            
      +                                   ++*fmt;
  1138   0010BA  501B               	movf	vfpfcnvrt@fmt^0,w,c
  1139   0010BC  6ED9               	movwf	fsr2l,c
  1140   0010BE  6ADA               	clrf	fsr2h,c
  1141   0010C0  2ADF               	incf	indf2,f,c
  1142                           
  1143                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1216:            
      +                                   break;
  1144   0010C2  EF76  F008         	goto	l1500
  1145   0010C6                     l1494:
  1146                           
  1147                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  1148   0010C6  0E01               	movlw	1
  1149   0010C8  6E1E               	movwf	vfpfcnvrt@done^0,c
  1150                           
  1151                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  1152   0010CA  EF76  F008         	goto	l1500
  1153   0010CE                     l1498:
  1154   0010CE  501B               	movf	vfpfcnvrt@fmt^0,w,c
  1155   0010D0  6ED9               	movwf	fsr2l,c
  1156   0010D2  6ADA               	clrf	fsr2h,c
  1157   0010D4  CFDF FFF6          	movff	indf2,tblptrl
  1158   0010D8                     	if	1	;There is more than 1 active tblptr byte
  1159   0010D8  0E10               	movlw	high __smallconst
  1160   0010DA  6EF7               	movwf	tblptrh,c
  1161   0010DC                     	endif
  1162   0010DC                     	if	0	;tblptru may be non-zero
  1163   0010DC                     	endif
  1164   0010DC                     	if	0	;tblptru may be non-zero
  1165   0010DC                     	endif
  1166   0010DC  0008               	tblrd		*
  1167   0010DE  50F5               	movf	tablat,w,c
  1168                           
  1169                           ; Switch size 1, requested type "simple"
  1170                           ; Number of cases is 1, Range of values is 45 to 45
  1171                           ; switch strategies available:
  1172                           ; Name         Instructions Cycles
  1173                           ; simple_byte            4     3 (average)
  1174                           ;	Chosen strategy is simple_byte
  1175   0010E0  0A2D               	xorlw	45	; case 45
  1176   0010E2  B4D8               	btfsc	status,2,c
  1177   0010E4  EF5C  F008         	goto	l1490
  1178   0010E8  EF63  F008         	goto	l1494
  1179   0010EC                     l1500:
  1180                           
  1181                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1182   0010EC  501E               	movf	vfpfcnvrt@done^0,w,c
  1183   0010EE  B4D8               	btfsc	status,2,c
  1184   0010F0  EF7C  F008         	goto	u731
  1185   0010F4  EF7E  F008         	goto	u730
  1186   0010F8                     u731:
  1187   0010F8  EF67  F008         	goto	l1498
  1188   0010FC                     u730:
  1189   0010FC                     
  1190                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  1191   0010FC  C01B  F007         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  1192   001100  C01C  F008         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  1193   001104  EC7E  F00B         	call	_read_prec_or_width	;wreg free
  1194   001108  C007  F045         	movff	?_read_prec_or_width,_width
  1195   00110C  C008  F046         	movff	?_read_prec_or_width+1,_width+1
  1196   001110                     
  1197                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  1198   001110  BE46               	btfsc	(_width+1)^0,7,c
  1199   001112  EF8F  F008         	goto	u740
  1200   001116  EF8D  F008         	goto	u741
  1201   00111A                     u741:
  1202   00111A  EF94  F008         	goto	l1508
  1203   00111E                     u740:
  1204   00111E                     
  1205                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  1206   00111E  8049               	bsf	_flags^0,0,c
  1207                           
  1208                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  1209   001120  6C45               	negf	_width^0,c
  1210   001122  1E46               	comf	(_width+1)^0,f,c
  1211   001124  B0D8               	btfsc	status,0,c
  1212   001126  2A46               	incf	(_width+1)^0,f,c
  1213   001128                     l1508:
  1214                           
  1215                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1656:   done = 0;
  1216   001128  0E00               	movlw	0
  1217   00112A  6E1E               	movwf	vfpfcnvrt@done^0,c
  1218   00112C                     
  1219                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1657:   if ((*fmt
      +                          )[0] == 's') {
  1220   00112C  501B               	movf	vfpfcnvrt@fmt^0,w,c
  1221   00112E  6ED9               	movwf	fsr2l,c
  1222   001130  6ADA               	clrf	fsr2h,c
  1223   001132  CFDF FFF6          	movff	indf2,tblptrl
  1224   001136                     	if	1	;There is more than 1 active tblptr byte
  1225   001136  0E10               	movlw	high __smallconst
  1226   001138  6EF7               	movwf	tblptrh,c
  1227   00113A                     	endif
  1228   00113A                     	if	0	;tblptru may be non-zero
  1229   00113A                     	endif
  1230   00113A                     	if	0	;tblptru may be non-zero
  1231   00113A                     	endif
  1232   00113A  0008               	tblrd		*
  1233   00113C  50F5               	movf	tablat,w,c
  1234   00113E  0A73               	xorlw	115
  1235   001140  A4D8               	btfss	status,2,c
  1236   001142  EFA5  F008         	goto	u751
  1237   001146  EFA7  F008         	goto	u750
  1238   00114A                     u751:
  1239   00114A  EFAF  F008         	goto	l1516
  1240   00114E                     u750:
  1241   00114E                     
  1242                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1658:    ++*fmt;
  1243   00114E  501B               	movf	vfpfcnvrt@fmt^0,w,c
  1244   001150  6ED9               	movwf	fsr2l,c
  1245   001152  6ADA               	clrf	fsr2h,c
  1246   001154  2ADF               	incf	indf2,f,c
  1247   001156                     l1514:
  1248                           
  1249                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1659:    done = 1
      +                          ;
  1250   001156  0E01               	movlw	1
  1251   001158  6E1E               	movwf	vfpfcnvrt@done^0,c
  1252                           
  1253                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1660:   }
  1254   00115A  EFF1  F008         	goto	l1526
  1255   00115E                     l1516:
  1256   00115E  501B               	movf	vfpfcnvrt@fmt^0,w,c
  1257   001160  6ED9               	movwf	fsr2l,c
  1258   001162  6ADA               	clrf	fsr2h,c
  1259   001164  CFDF FFF6          	movff	indf2,tblptrl
  1260   001168                     	if	1	;There is more than 1 active tblptr byte
  1261   001168  0E10               	movlw	high __smallconst
  1262   00116A  6EF7               	movwf	tblptrh,c
  1263   00116C                     	endif
  1264   00116C                     	if	0	;tblptru may be non-zero
  1265   00116C                     	endif
  1266   00116C                     	if	0	;tblptru may be non-zero
  1267   00116C                     	endif
  1268   00116C  0008               	tblrd		*
  1269   00116E  50F5               	movf	tablat,w,c
  1270   001170  0A6C               	xorlw	108
  1271   001172  A4D8               	btfss	status,2,c
  1272   001174  EFBE  F008         	goto	u761
  1273   001178  EFC0  F008         	goto	u760
  1274   00117C                     u761:
  1275   00117C  EFF1  F008         	goto	l1526
  1276   001180                     u760:
  1277   001180  501B               	movf	vfpfcnvrt@fmt^0,w,c
  1278   001182  6ED9               	movwf	fsr2l,c
  1279   001184  6ADA               	clrf	fsr2h,c
  1280   001186  50DF               	movf	indf2,w,c
  1281   001188  6E1D               	movwf	??_vfpfcnvrt^0,c
  1282   00118A  0E01               	movlw	1
  1283   00118C  261D               	addwf	??_vfpfcnvrt^0,f,c
  1284   00118E  C01D  FFF6         	movff	??_vfpfcnvrt,tblptrl
  1285   001192                     	if	1	;There is more than 1 active tblptr byte
  1286   001192  0E10               	movlw	high __smallconst
  1287   001194  6EF7               	movwf	tblptrh,c
  1288   001196                     	endif
  1289   001196                     	if	0	;tblptru may be non-zero
  1290   001196                     	endif
  1291   001196                     	if	0	;tblptru may be non-zero
  1292   001196                     	endif
  1293   001196  0008               	tblrd		*
  1294   001198  50F5               	movf	tablat,w,c
  1295   00119A  0A6C               	xorlw	108
  1296   00119C  A4D8               	btfss	status,2,c
  1297   00119E  EFD3  F008         	goto	u771
  1298   0011A2  EFD5  F008         	goto	u770
  1299   0011A6                     u771:
  1300   0011A6  EFF1  F008         	goto	l1526
  1301   0011AA                     u770:
  1302   0011AA  501B               	movf	vfpfcnvrt@fmt^0,w,c
  1303   0011AC  6ED9               	movwf	fsr2l,c
  1304   0011AE  6ADA               	clrf	fsr2h,c
  1305   0011B0  50DF               	movf	indf2,w,c
  1306   0011B2  6E1D               	movwf	??_vfpfcnvrt^0,c
  1307   0011B4  0E02               	movlw	2
  1308   0011B6  261D               	addwf	??_vfpfcnvrt^0,f,c
  1309   0011B8  C01D  FFF6         	movff	??_vfpfcnvrt,tblptrl
  1310   0011BC                     	if	1	;There is more than 1 active tblptr byte
  1311   0011BC  0E10               	movlw	high __smallconst
  1312   0011BE  6EF7               	movwf	tblptrh,c
  1313   0011C0                     	endif
  1314   0011C0                     	if	0	;tblptru may be non-zero
  1315   0011C0                     	endif
  1316   0011C0                     	if	0	;tblptru may be non-zero
  1317   0011C0                     	endif
  1318   0011C0  0008               	tblrd		*
  1319   0011C2  50F5               	movf	tablat,w,c
  1320   0011C4  0A73               	xorlw	115
  1321   0011C6  A4D8               	btfss	status,2,c
  1322   0011C8  EFE8  F008         	goto	u781
  1323   0011CC  EFEA  F008         	goto	u780
  1324   0011D0                     u781:
  1325   0011D0  EFF1  F008         	goto	l1526
  1326   0011D4                     u780:
  1327   0011D4                     
  1328                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1662:    *fmt += 
      +                          3;
  1329   0011D4  501B               	movf	vfpfcnvrt@fmt^0,w,c
  1330   0011D6  6ED9               	movwf	fsr2l,c
  1331   0011D8  6ADA               	clrf	fsr2h,c
  1332   0011DA  0E03               	movlw	3
  1333   0011DC  26DF               	addwf	indf2,f,c
  1334   0011DE  EFAB  F008         	goto	l1514
  1335   0011E2                     l1526:
  1336                           
  1337                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1665:   if (done)
      +                           {
  1338   0011E2  501E               	movf	vfpfcnvrt@done^0,w,c
  1339   0011E4  B4D8               	btfsc	status,2,c
  1340   0011E6  EFF7  F008         	goto	u791
  1341   0011EA  EFF9  F008         	goto	u790
  1342   0011EE                     u791:
  1343   0011EE  EF0D  F009         	goto	l1532
  1344   0011F2                     u790:
  1345   0011F2                     
  1346                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1682:    return (
      +                          void) stoa(fp, (*(char * *)__va_arg(*(char * **)ap, (char *)0)));;	Return value of _vfpf
      +                          cnvrt is never used
  1347   0011F2  C019  F00B         	movff	vfpfcnvrt@fp,stoa@fp
  1348   0011F6  C01A  F00C         	movff	vfpfcnvrt@fp+1,stoa@fp+1
  1349   0011FA  501C               	movf	vfpfcnvrt@ap^0,w,c
  1350   0011FC  6ED9               	movwf	fsr2l,c
  1351   0011FE  6ADA               	clrf	fsr2h,c
  1352   001200  0E02               	movlw	2
  1353   001202  26DF               	addwf	indf2,f,c
  1354   001204  5CDF               	subwf	indf2,w,c
  1355   001206  6ED9               	movwf	fsr2l,c
  1356   001208  6ADA               	clrf	fsr2h,c
  1357   00120A  CFDE F00D          	movff	postinc2,stoa@s
  1358   00120E  CFDE F00E          	movff	postinc2,stoa@s+1
  1359   001212  EC27  F009         	call	_stoa	;wreg free
  1360   001216  EF26  F009         	goto	l952
  1361   00121A                     l1532:
  1362                           
  1363                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1364   00121A  501B               	movf	vfpfcnvrt@fmt^0,w,c
  1365   00121C  6ED9               	movwf	fsr2l,c
  1366   00121E  6ADA               	clrf	fsr2h,c
  1367   001220  2ADF               	incf	indf2,f,c
  1368   001222  EF26  F009         	goto	l952
  1369   001226                     l1536:
  1370                           
  1371                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1372   001226  501B               	movf	vfpfcnvrt@fmt^0,w,c
  1373   001228  6ED9               	movwf	fsr2l,c
  1374   00122A  6ADA               	clrf	fsr2h,c
  1375   00122C  CFDF FFF6          	movff	indf2,tblptrl
  1376   001230                     	if	1	;There is more than 1 active tblptr byte
  1377   001230  0E10               	movlw	high __smallconst
  1378   001232  6EF7               	movwf	tblptrh,c
  1379   001234                     	endif
  1380   001234                     	if	0	;tblptru may be non-zero
  1381   001234                     	endif
  1382   001234                     	if	0	;tblptru may be non-zero
  1383   001234                     	endif
  1384   001234  0008               	tblrd		*
  1385   001236  50F5               	movf	tablat,w,c
  1386   001238  6E02               	movwf	fputc@c^0,c
  1387   00123A  6A03               	clrf	(fputc@c+1)^0,c
  1388   00123C  C019  F004         	movff	vfpfcnvrt@fp,fputc@fp
  1389   001240  C01A  F005         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1390   001244  EC21  F00B         	call	_fputc	;wreg free
  1391   001248  EF0D  F009         	goto	l1532
  1392   00124C                     l952:
  1393   00124C  0012               	return		;funcret
  1394   00124E                     __end_of_vfpfcnvrt:
  1395                           	callstack 0
  1396                           
  1397 ;; *************** function _stoa *****************
  1398 ;; Defined at:
  1399 ;;		line 942 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  1400 ;; Parameters:    Size  Location     Type
  1401 ;;  fp              2   10[COMRAM] PTR struct _IO_FILE
  1402 ;;		 -> NULL(0), sprintf@f(12), 
  1403 ;;  s               2   12[COMRAM] PTR unsigned char 
  1404 ;;		 -> ?_printf(2), ?_sprintf(2), STR_9(1), STR_8(6), 
  1405 ;;		 -> STR_7(5), STR_6(4), STR_5(4), STR_4(4), 
  1406 ;;		 -> STR_3(5), STR_2(5), 
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;  l               2   22[COMRAM] int 
  1409 ;;  cp              2   20[COMRAM] PTR unsigned char 
  1410 ;;		 -> ?_printf(2), STR_12(7), ?_sprintf(2), STR_9(1), 
  1411 ;;		 -> STR_8(6), STR_7(5), STR_6(4), STR_5(4), 
  1412 ;;		 -> STR_4(4), STR_3(5), STR_2(5), 
  1413 ;;  w               2   18[COMRAM] int 
  1414 ;;  p               2   16[COMRAM] int 
  1415 ;; Return value:  Size  Location     Type
  1416 ;;                  1    wreg      void 
  1417 ;; Registers used:
  1418 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1419 ;; Tracked objects:
  1420 ;;		On entry : 0/0
  1421 ;;		On exit  : 0/0
  1422 ;;		Unchanged: 0/0
  1423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1424 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1425 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1426 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1427 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1428 ;;Total ram usage:       14 bytes
  1429 ;; Hardware stack levels used: 1
  1430 ;; Hardware stack levels required when called: 2
  1431 ;; This function calls:
  1432 ;;		_fputc
  1433 ;; This function is called by:
  1434 ;;		_vfpfcnvrt
  1435 ;; This function uses a non-reentrant model
  1436 ;;
  1437                           
  1438                           	psect	text5
  1439   00124E                     __ptext5:
  1440                           	callstack 0
  1441   00124E                     _stoa:
  1442                           	callstack 24
  1443   00124E                     
  1444                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 942: static void 
      +                          stoa(FILE *fp, char *s);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\dopr
      +                          nt.c: 943: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 944: 
      +                              char *cp;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 945:
      +                               int l, p;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 947
      +                          :  int w;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 951:    
      +                           cp = s;
  1445   00124E  C00D  F015         	movff	stoa@s,stoa@cp
  1446   001252  C00E  F016         	movff	stoa@s+1,stoa@cp+1
  1447                           
  1448                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 952:     if (!cp)
      +                           {
  1449   001256  5015               	movf	stoa@cp^0,w,c
  1450   001258  1016               	iorwf	(stoa@cp+1)^0,w,c
  1451   00125A  A4D8               	btfss	status,2,c
  1452   00125C  EF32  F009         	goto	u611
  1453   001260  EF34  F009         	goto	u610
  1454   001264                     u611:
  1455   001264  EF3A  F009         	goto	l1438
  1456   001268                     u610:
  1457   001268                     
  1458                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 953:         cp =
      +                           "(null)";
  1459   001268  0E41               	movlw	low STR_12
  1460   00126A  6E15               	movwf	stoa@cp^0,c
  1461   00126C  5015               	movf	stoa@cp^0,w,c
  1462   00126E  A4D8               	btfss	status,2,c
  1463   001270  0E10               	movlw	high __smallconst
  1464   001272  6E16               	movwf	(stoa@cp+1)^0,c
  1465   001274                     l1438:
  1466                           
  1467                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 957:  for (l = 0;
      +                           cp[l] != '\0'; l++) {
  1468   001274  0E00               	movlw	0
  1469   001276  6E18               	movwf	(stoa@l+1)^0,c
  1470   001278  0E00               	movlw	0
  1471   00127A  6E17               	movwf	stoa@l^0,c
  1472   00127C  EF42  F009         	goto	l1442
  1473   001280                     l1440:
  1474   001280  4A17               	infsnz	stoa@l^0,f,c
  1475   001282  2A18               	incf	(stoa@l+1)^0,f,c
  1476   001284                     l1442:
  1477   001284  5017               	movf	stoa@l^0,w,c
  1478   001286  2415               	addwf	stoa@cp^0,w,c
  1479   001288  6E0F               	movwf	??_stoa^0,c
  1480   00128A  5018               	movf	(stoa@l+1)^0,w,c
  1481   00128C  2016               	addwfc	(stoa@cp+1)^0,w,c
  1482   00128E  6E10               	movwf	(??_stoa+1)^0,c
  1483   001290  C00F  FFF6         	movff	??_stoa,tblptrl
  1484   001294  C010  FFF7         	movff	??_stoa+1,tblptrh
  1485   001298  0E00               	movlw	low (__smallconst shr (0+16))
  1486   00129A  6EF8               	movwf	tblptru,c
  1487   00129C  0E0F               	movlw	(high __ramtop+-1)
  1488   00129E  64F7               	cpfsgt	tblptrh,c
  1489   0012A0  D003               	bra	u627
  1490   0012A2  0008               	tblrd		*
  1491   0012A4  50F5               	movf	tablat,w,c
  1492   0012A6  D005               	bra	u620
  1493   0012A8                     u627:
  1494   0012A8  CFF6 FFE9          	movff	tblptrl,fsr0l
  1495   0012AC  CFF7 FFEA          	movff	tblptrh,fsr0h
  1496   0012B0  50EF               	movf	indf0,w,c
  1497   0012B2                     u620:
  1498   0012B2  0900               	iorlw	0
  1499   0012B4  A4D8               	btfss	status,2,c
  1500   0012B6  EF5F  F009         	goto	u631
  1501   0012BA  EF61  F009         	goto	u630
  1502   0012BE                     u631:
  1503   0012BE  EF40  F009         	goto	l1440
  1504   0012C2                     u630:
  1505   0012C2                     
  1506                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 965:     p = l;
  1507   0012C2  C017  F011         	movff	stoa@l,stoa@p
  1508   0012C6  C018  F012         	movff	stoa@l+1,stoa@p+1
  1509                           
  1510                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 969:     w = widt
      +                          h;
  1511   0012CA  C045  F013         	movff	_width,stoa@w
  1512   0012CE  C046  F014         	movff	_width+1,stoa@w+1
  1513                           
  1514                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 970:     if (!(fl
      +                          ags & (1 << 0))) {
  1515   0012D2  B049               	btfsc	_flags^0,0,c
  1516   0012D4  EF6E  F009         	goto	u641
  1517   0012D8  EF70  F009         	goto	u640
  1518   0012DC                     u641:
  1519   0012DC  EFAC  F009         	goto	l1456
  1520   0012E0                     u640:
  1521   0012E0  EF7E  F009         	goto	l1450
  1522   0012E4                     l1446:
  1523                           
  1524                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 972:             
      +                          fputc(' ', fp);
  1525   0012E4  0E00               	movlw	0
  1526   0012E6  6E03               	movwf	(fputc@c+1)^0,c
  1527   0012E8  0E20               	movlw	32
  1528   0012EA  6E02               	movwf	fputc@c^0,c
  1529   0012EC  C00B  F004         	movff	stoa@fp,fputc@fp
  1530   0012F0  C00C  F005         	movff	stoa@fp+1,fputc@fp+1
  1531   0012F4  EC21  F00B         	call	_fputc	;wreg free
  1532   0012F8                     
  1533                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 973:             
      +                          ++l;
  1534   0012F8  4A17               	infsnz	stoa@l^0,f,c
  1535   0012FA  2A18               	incf	(stoa@l+1)^0,f,c
  1536   0012FC                     l1450:
  1537                           
  1538                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 971:         whil
      +                          e (l < w) {
  1539   0012FC  5013               	movf	stoa@w^0,w,c
  1540   0012FE  5C17               	subwf	stoa@l^0,w,c
  1541   001300  5018               	movf	(stoa@l+1)^0,w,c
  1542   001302  0A80               	xorlw	128
  1543   001304  6E0F               	movwf	??_stoa^0,c
  1544   001306  5014               	movf	(stoa@w+1)^0,w,c
  1545   001308  0A80               	xorlw	128
  1546   00130A  580F               	subwfb	??_stoa^0,w,c
  1547   00130C  A0D8               	btfss	status,0,c
  1548   00130E  EF8B  F009         	goto	u651
  1549   001312  EF8D  F009         	goto	u650
  1550   001316                     u651:
  1551   001316  EF72  F009         	goto	l1446
  1552   00131A                     u650:
  1553   00131A  EFAC  F009         	goto	l1456
  1554   00131E                     l1452:
  1555                           
  1556                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 980:         fput
      +                          c(*cp, fp);
  1557   00131E  C015  FFF6         	movff	stoa@cp,tblptrl
  1558   001322  C016  FFF7         	movff	stoa@cp+1,tblptrh
  1559   001326  0E00               	movlw	low (__smallconst shr (0+16))
  1560   001328  6EF8               	movwf	tblptru,c
  1561   00132A  0E0F               	movlw	(high __ramtop+-1)
  1562   00132C  64F7               	cpfsgt	tblptrh,c
  1563   00132E  D003               	bra	u667
  1564   001330  0008               	tblrd		*
  1565   001332  50F5               	movf	tablat,w,c
  1566   001334  D005               	bra	u660
  1567   001336                     u667:
  1568   001336  CFF6 FFE9          	movff	tblptrl,fsr0l
  1569   00133A  CFF7 FFEA          	movff	tblptrh,fsr0h
  1570   00133E  50EF               	movf	indf0,w,c
  1571   001340                     u660:
  1572   001340  6E0F               	movwf	??_stoa^0,c
  1573   001342  500F               	movf	??_stoa^0,w,c
  1574   001344  6E02               	movwf	fputc@c^0,c
  1575   001346  6A03               	clrf	(fputc@c+1)^0,c
  1576   001348  C00B  F004         	movff	stoa@fp,fputc@fp
  1577   00134C  C00C  F005         	movff	stoa@fp+1,fputc@fp+1
  1578   001350  EC21  F00B         	call	_fputc	;wreg free
  1579   001354                     
  1580                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 981:         ++cp
      +                          ;
  1581   001354  4A15               	infsnz	stoa@cp^0,f,c
  1582   001356  2A16               	incf	(stoa@cp+1)^0,f,c
  1583   001358                     l1456:
  1584                           
  1585                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 979:     while (p
      +                          --) {
  1586   001358  0611               	decf	stoa@p^0,f,c
  1587   00135A  A0D8               	btfss	status,0,c
  1588   00135C  0612               	decf	(stoa@p+1)^0,f,c
  1589   00135E  2811               	incf	stoa@p^0,w,c
  1590   001360  E106               	bnz	u671
  1591   001362  2812               	incf	(stoa@p+1)^0,w,c
  1592   001364  A4D8               	btfss	status,2,c
  1593   001366  EFB7  F009         	goto	u671
  1594   00136A  EFB9  F009         	goto	u670
  1595   00136E                     u671:
  1596   00136E  EF8F  F009         	goto	l1452
  1597   001372                     u670:
  1598   001372                     
  1599                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 986:     if (flag
      +                          s & (1 << 0)) {
  1600   001372  A049               	btfss	_flags^0,0,c
  1601   001374  EFBE  F009         	goto	u681
  1602   001378  EFC0  F009         	goto	u680
  1603   00137C                     u681:
  1604   00137C  EFDD  F009         	goto	l928
  1605   001380                     u680:
  1606   001380  EFCE  F009         	goto	l1464
  1607   001384                     l1460:
  1608                           
  1609                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 988:             
      +                          fputc(' ', fp);
  1610   001384  0E00               	movlw	0
  1611   001386  6E03               	movwf	(fputc@c+1)^0,c
  1612   001388  0E20               	movlw	32
  1613   00138A  6E02               	movwf	fputc@c^0,c
  1614   00138C  C00B  F004         	movff	stoa@fp,fputc@fp
  1615   001390  C00C  F005         	movff	stoa@fp+1,fputc@fp+1
  1616   001394  EC21  F00B         	call	_fputc	;wreg free
  1617   001398                     
  1618                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 989:             
      +                          ++l;
  1619   001398  4A17               	infsnz	stoa@l^0,f,c
  1620   00139A  2A18               	incf	(stoa@l+1)^0,f,c
  1621   00139C                     l1464:
  1622                           
  1623                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 987:         whil
      +                          e (l < w) {
  1624   00139C  5013               	movf	stoa@w^0,w,c
  1625   00139E  5C17               	subwf	stoa@l^0,w,c
  1626   0013A0  5018               	movf	(stoa@l+1)^0,w,c
  1627   0013A2  0A80               	xorlw	128
  1628   0013A4  6E0F               	movwf	??_stoa^0,c
  1629   0013A6  5014               	movf	(stoa@w+1)^0,w,c
  1630   0013A8  0A80               	xorlw	128
  1631   0013AA  580F               	subwfb	??_stoa^0,w,c
  1632   0013AC  A0D8               	btfss	status,0,c
  1633   0013AE  EFDB  F009         	goto	u691
  1634   0013B2  EFDD  F009         	goto	u690
  1635   0013B6                     u691:
  1636   0013B6  EFC2  F009         	goto	l1460
  1637   0013BA                     u690:
  1638   0013BA                     l928:
  1639   0013BA  0012               	return		;funcret
  1640   0013BC                     __end_of_stoa:
  1641                           	callstack 0
  1642                           
  1643 ;; *************** function _fputc *****************
  1644 ;; Defined at:
  1645 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_fputc.c"
  1646 ;; Parameters:    Size  Location     Type
  1647 ;;  c               2    1[COMRAM] int 
  1648 ;;  fp              2    3[COMRAM] PTR struct _IO_FILE
  1649 ;;		 -> NULL(0), sprintf@f(12), 
  1650 ;; Auto vars:     Size  Location     Type
  1651 ;;		None
  1652 ;; Return value:  Size  Location     Type
  1653 ;;                  2    1[COMRAM] int 
  1654 ;; Registers used:
  1655 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1656 ;; Tracked objects:
  1657 ;;		On entry : 0/0
  1658 ;;		On exit  : 0/0
  1659 ;;		Unchanged: 0/0
  1660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1661 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1663 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1664 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1665 ;;Total ram usage:        9 bytes
  1666 ;; Hardware stack levels used: 1
  1667 ;; Hardware stack levels required when called: 1
  1668 ;; This function calls:
  1669 ;;		_putch
  1670 ;; This function is called by:
  1671 ;;		_stoa
  1672 ;;		_vfpfcnvrt
  1673 ;; This function uses a non-reentrant model
  1674 ;;
  1675                           
  1676                           	psect	text6
  1677   001642                     __ptext6:
  1678                           	callstack 0
  1679   001642                     _fputc:
  1680                           	callstack 24
  1681   001642  5004               	movf	fputc@fp^0,w,c
  1682   001644  1005               	iorwf	(fputc@fp+1)^0,w,c
  1683   001646  B4D8               	btfsc	status,2,c
  1684   001648  EF28  F00B         	goto	u571
  1685   00164C  EF2A  F00B         	goto	u570
  1686   001650                     u571:
  1687   001650  EF33  F00B         	goto	l1424
  1688   001654                     u570:
  1689   001654  5004               	movf	fputc@fp^0,w,c
  1690   001656  1005               	iorwf	(fputc@fp+1)^0,w,c
  1691   001658  A4D8               	btfss	status,2,c
  1692   00165A  EF31  F00B         	goto	u581
  1693   00165E  EF33  F00B         	goto	u580
  1694   001662                     u581:
  1695   001662  EF38  F00B         	goto	l1426
  1696   001666                     u580:
  1697   001666                     l1424:
  1698   001666  5002               	movf	fputc@c^0,w,c
  1699   001668  EC9B  F00C         	call	_putch
  1700   00166C  EF7D  F00B         	goto	l970
  1701   001670                     l1426:
  1702   001670  EE20 F00A          	lfsr	2,10
  1703   001674  5004               	movf	fputc@fp^0,w,c
  1704   001676  26D9               	addwf	fsr2l,f,c
  1705   001678  5005               	movf	(fputc@fp+1)^0,w,c
  1706   00167A  22DA               	addwfc	fsr2h,f,c
  1707   00167C  50DE               	movf	postinc2,w,c
  1708   00167E  10DE               	iorwf	postinc2,w,c
  1709   001680  B4D8               	btfsc	status,2,c
  1710   001682  EF45  F00B         	goto	u591
  1711   001686  EF47  F00B         	goto	u590
  1712   00168A                     u591:
  1713   00168A  EF62  F00B         	goto	l1430
  1714   00168E                     u590:
  1715   00168E  EE20 F00A          	lfsr	2,10
  1716   001692  5004               	movf	fputc@fp^0,w,c
  1717   001694  26D9               	addwf	fsr2l,f,c
  1718   001696  5005               	movf	(fputc@fp+1)^0,w,c
  1719   001698  22DA               	addwfc	fsr2h,f,c
  1720   00169A  EE10 F003          	lfsr	1,3
  1721   00169E  5004               	movf	fputc@fp^0,w,c
  1722   0016A0  26E1               	addwf	fsr1l,f,c
  1723   0016A2  5005               	movf	(fputc@fp+1)^0,w,c
  1724   0016A4  22E2               	addwfc	fsr1h,f,c
  1725   0016A6  50DE               	movf	postinc2,w,c
  1726   0016A8  5CE6               	subwf	postinc1,w,c
  1727   0016AA  50E6               	movf	postinc1,w,c
  1728   0016AC  0A80               	xorlw	128
  1729   0016AE  6E0A               	movwf	(??_fputc+4)^0,c
  1730   0016B0  50DE               	movf	postinc2,w,c
  1731   0016B2  0A80               	xorlw	128
  1732   0016B4  580A               	subwfb	(??_fputc+4)^0,w,c
  1733   0016B6  B0D8               	btfsc	status,0,c
  1734   0016B8  EF60  F00B         	goto	u601
  1735   0016BC  EF62  F00B         	goto	u600
  1736   0016C0                     u601:
  1737   0016C0  EF7D  F00B         	goto	l970
  1738   0016C4                     u600:
  1739   0016C4                     l1430:
  1740   0016C4  EE20 F003          	lfsr	2,3
  1741   0016C8  5004               	movf	fputc@fp^0,w,c
  1742   0016CA  26D9               	addwf	fsr2l,f,c
  1743   0016CC  5005               	movf	(fputc@fp+1)^0,w,c
  1744   0016CE  22DA               	addwfc	fsr2h,f,c
  1745   0016D0  50DF               	movf	indf2,w,c
  1746   0016D2  6E06               	movwf	??_fputc^0,c
  1747   0016D4  C004  FFD9         	movff	fputc@fp,fsr2l
  1748   0016D8  C005  FFDA         	movff	fputc@fp+1,fsr2h
  1749   0016DC  50DF               	movf	indf2,w,c
  1750   0016DE  2406               	addwf	??_fputc^0,w,c
  1751   0016E0  6ED9               	movwf	fsr2l,c
  1752   0016E2  6ADA               	clrf	fsr2h,c
  1753   0016E4  C002  FFDF         	movff	fputc@c,indf2
  1754   0016E8  EE20 F003          	lfsr	2,3
  1755   0016EC  5004               	movf	fputc@fp^0,w,c
  1756   0016EE  26D9               	addwf	fsr2l,f,c
  1757   0016F0  5005               	movf	(fputc@fp+1)^0,w,c
  1758   0016F2  22DA               	addwfc	fsr2h,f,c
  1759   0016F4  2ADE               	incf	postinc2,f,c
  1760   0016F6  0E00               	movlw	0
  1761   0016F8  22DD               	addwfc	postdec2,f,c
  1762   0016FA                     l970:
  1763   0016FA  0012               	return		;funcret
  1764   0016FC                     __end_of_fputc:
  1765                           	callstack 0
  1766                           
  1767 ;; *************** function _putch *****************
  1768 ;; Defined at:
  1769 ;;		line 11 in file "putch.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;  data            1    wreg     unsigned char 
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;  data            1    0[COMRAM] unsigned char 
  1774 ;; Return value:  Size  Location     Type
  1775 ;;                  1    wreg      void 
  1776 ;; Registers used:
  1777 ;;		wreg
  1778 ;; Tracked objects:
  1779 ;;		On entry : 0/0
  1780 ;;		On exit  : 0/0
  1781 ;;		Unchanged: 0/0
  1782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1784 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1786 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1787 ;;Total ram usage:        1 bytes
  1788 ;; Hardware stack levels used: 1
  1789 ;; This function calls:
  1790 ;;		Nothing
  1791 ;; This function is called by:
  1792 ;;		_fputc
  1793 ;; This function uses a non-reentrant model
  1794 ;;
  1795                           
  1796                           	psect	text7
  1797   001936                     __ptext7:
  1798                           	callstack 0
  1799   001936                     _putch:
  1800                           	callstack 24
  1801                           
  1802                           ;incstack = 0
  1803                           ;putch@data stored from wreg
  1804   001936  6E01               	movwf	putch@data^0,c
  1805   001938                     l186:
  1806   001938  A89E               	btfss	3998,4,c	;volatile
  1807   00193A  EFA1  F00C         	goto	u561
  1808   00193E  EFA3  F00C         	goto	u560
  1809   001942                     u561:
  1810   001942  EF9C  F00C         	goto	l186
  1811   001946                     u560:
  1812   001946                     
  1813                           ;putch.c: 13:     TXREG1 = data;
  1814   001946  C001  FFAD         	movff	putch@data,4013	;volatile
  1815   00194A  0012               	return		;funcret
  1816   00194C                     __end_of_putch:
  1817                           	callstack 0
  1818                           
  1819 ;; *************** function _read_prec_or_width *****************
  1820 ;; Defined at:
  1821 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  1822 ;; Parameters:    Size  Location     Type
  1823 ;;  fmt             1    6[COMRAM] PTR PTR const unsigned c
  1824 ;;		 -> vfprintf@cfmt(1), 
  1825 ;;  ap              1    7[COMRAM] PTR PTR void [1]
  1826 ;;		 -> printf@ap(1), sprintf@ap(1), 
  1827 ;; Auto vars:     Size  Location     Type
  1828 ;;  c               1    8[COMRAM] unsigned char 
  1829 ;;  n               2    9[COMRAM] int 
  1830 ;; Return value:  Size  Location     Type
  1831 ;;                  2    6[COMRAM] int 
  1832 ;; Registers used:
  1833 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1834 ;; Tracked objects:
  1835 ;;		On entry : 0/0
  1836 ;;		On exit  : 0/0
  1837 ;;		Unchanged: 0/0
  1838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1839 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1840 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1842 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1843 ;;Total ram usage:        5 bytes
  1844 ;; Hardware stack levels used: 1
  1845 ;; Hardware stack levels required when called: 1
  1846 ;; This function calls:
  1847 ;;		___wmul
  1848 ;; This function is called by:
  1849 ;;		_vfpfcnvrt
  1850 ;; This function uses a non-reentrant model
  1851 ;;
  1852                           
  1853                           	psect	text8
  1854   0016FC                     __ptext8:
  1855                           	callstack 0
  1856   0016FC                     _read_prec_or_width:
  1857                           	callstack 25
  1858   0016FC                     
  1859                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  1860   0016FC  0E00               	movlw	0
  1861   0016FE  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  1862   001700  0E00               	movlw	0
  1863   001702  6E0A               	movwf	read_prec_or_width@n^0,c
  1864   001704                     
  1865                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  1866   001704  5007               	movf	read_prec_or_width@fmt^0,w,c
  1867   001706  6ED9               	movwf	fsr2l,c
  1868   001708  6ADA               	clrf	fsr2h,c
  1869   00170A  CFDF FFF6          	movff	indf2,tblptrl
  1870   00170E                     	if	1	;There is more than 1 active tblptr byte
  1871   00170E  0E10               	movlw	high __smallconst
  1872   001710  6EF7               	movwf	tblptrh,c
  1873   001712                     	endif
  1874   001712                     	if	0	;tblptru may be non-zero
  1875   001712                     	endif
  1876   001712                     	if	0	;tblptru may be non-zero
  1877   001712                     	endif
  1878   001712  0008               	tblrd		*
  1879   001714  50F5               	movf	tablat,w,c
  1880   001716  0A2A               	xorlw	42
  1881   001718  A4D8               	btfss	status,2,c
  1882   00171A  EF91  F00B         	goto	u701
  1883   00171E  EF93  F00B         	goto	u700
  1884   001722                     u701:
  1885   001722  EFB9  F00B         	goto	l1478
  1886   001726                     u700:
  1887   001726                     
  1888                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  1889   001726  5007               	movf	read_prec_or_width@fmt^0,w,c
  1890   001728  6ED9               	movwf	fsr2l,c
  1891   00172A  6ADA               	clrf	fsr2h,c
  1892   00172C  2ADF               	incf	indf2,f,c
  1893   00172E                     
  1894                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  1895   00172E  5008               	movf	read_prec_or_width@ap^0,w,c
  1896   001730  6ED9               	movwf	fsr2l,c
  1897   001732  6ADA               	clrf	fsr2h,c
  1898   001734  0E02               	movlw	2
  1899   001736  26DF               	addwf	indf2,f,c
  1900   001738  5CDF               	subwf	indf2,w,c
  1901   00173A  6ED9               	movwf	fsr2l,c
  1902   00173C  6ADA               	clrf	fsr2h,c
  1903   00173E  CFDE F00A          	movff	postinc2,read_prec_or_width@n
  1904   001742  CFDE F00B          	movff	postinc2,read_prec_or_width@n+1
  1905                           
  1906                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  1907   001746  EFCC  F00B         	goto	l932
  1908   00174A                     l1474:
  1909                           
  1910                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  1911   00174A  C00A  F001         	movff	read_prec_or_width@n,___wmul@multiplier
  1912   00174E  C00B  F002         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  1913   001752  0E00               	movlw	0
  1914   001754  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1915   001756  0E0A               	movlw	10
  1916   001758  6E03               	movwf	___wmul@multiplicand^0,c
  1917   00175A  EC75  F00C         	call	___wmul	;wreg free
  1918   00175E  5009               	movf	read_prec_or_width@c^0,w,c
  1919   001760  2401               	addwf	?___wmul^0,w,c
  1920   001762  6E0A               	movwf	read_prec_or_width@n^0,c
  1921   001764  0E00               	movlw	0
  1922   001766  2002               	addwfc	(?___wmul+1)^0,w,c
  1923   001768  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  1924   00176A                     
  1925                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  1926   00176A  5007               	movf	read_prec_or_width@fmt^0,w,c
  1927   00176C  6ED9               	movwf	fsr2l,c
  1928   00176E  6ADA               	clrf	fsr2h,c
  1929   001770  2ADF               	incf	indf2,f,c
  1930   001772                     l1478:
  1931                           
  1932                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  1933   001772  5007               	movf	read_prec_or_width@fmt^0,w,c
  1934   001774  6ED9               	movwf	fsr2l,c
  1935   001776  6ADA               	clrf	fsr2h,c
  1936   001778  CFDF FFF6          	movff	indf2,tblptrl
  1937   00177C                     	if	1	;There is more than 1 active tblptr byte
  1938   00177C  0E10               	movlw	high __smallconst
  1939   00177E  6EF7               	movwf	tblptrh,c
  1940   001780                     	endif
  1941   001780                     	if	0	;tblptru may be non-zero
  1942   001780                     	endif
  1943   001780                     	if	0	;tblptru may be non-zero
  1944   001780                     	endif
  1945   001780  0008               	tblrd		*
  1946   001782  50F5               	movf	tablat,w,c
  1947   001784  0FD0               	addlw	208
  1948   001786  6E09               	movwf	read_prec_or_width@c^0,c
  1949   001788  0E09               	movlw	9
  1950   00178A  6409               	cpfsgt	read_prec_or_width@c^0,c
  1951   00178C  EFCA  F00B         	goto	u711
  1952   001790  EFCC  F00B         	goto	u710
  1953   001794                     u711:
  1954   001794  EFA5  F00B         	goto	l1474
  1955   001798                     u710:
  1956   001798                     l932:
  1957                           
  1958                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  1959   001798  C00A  F007         	movff	read_prec_or_width@n,?_read_prec_or_width
  1960   00179C  C00B  F008         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  1961   0017A0  0012               	return		;funcret
  1962   0017A2                     __end_of_read_prec_or_width:
  1963                           	callstack 0
  1964                           
  1965 ;; *************** function ___wmul *****************
  1966 ;; Defined at:
  1967 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
  1968 ;; Parameters:    Size  Location     Type
  1969 ;;  multiplier      2    0[COMRAM] unsigned int 
  1970 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1971 ;; Auto vars:     Size  Location     Type
  1972 ;;  product         2    4[COMRAM] unsigned int 
  1973 ;; Return value:  Size  Location     Type
  1974 ;;                  2    0[COMRAM] unsigned int 
  1975 ;; Registers used:
  1976 ;;		wreg, status,2, status,0, prodl, prodh
  1977 ;; Tracked objects:
  1978 ;;		On entry : 0/0
  1979 ;;		On exit  : 0/0
  1980 ;;		Unchanged: 0/0
  1981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1982 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1983 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1985 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1986 ;;Total ram usage:        6 bytes
  1987 ;; Hardware stack levels used: 1
  1988 ;; This function calls:
  1989 ;;		Nothing
  1990 ;; This function is called by:
  1991 ;;		_read_prec_or_width
  1992 ;; This function uses a non-reentrant model
  1993 ;;
  1994                           
  1995                           	psect	text9
  1996   0018EA                     __ptext9:
  1997                           	callstack 0
  1998   0018EA                     ___wmul:
  1999                           	callstack 25
  2000   0018EA  5001               	movf	___wmul@multiplier^0,w,c
  2001   0018EC  0203               	mulwf	___wmul@multiplicand^0,c
  2002   0018EE  CFF3 F005          	movff	prodl,___wmul@product
  2003   0018F2  CFF4 F006          	movff	prodh,___wmul@product+1
  2004   0018F6  5001               	movf	___wmul@multiplier^0,w,c
  2005   0018F8  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2006   0018FA  50F3               	movf	243,w,c
  2007   0018FC  2606               	addwf	(___wmul@product+1)^0,f,c
  2008   0018FE  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2009   001900  0203               	mulwf	___wmul@multiplicand^0,c
  2010   001902  50F3               	movf	243,w,c
  2011   001904  2606               	addwf	(___wmul@product+1)^0,f,c
  2012   001906  C005  F001         	movff	___wmul@product,?___wmul
  2013   00190A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2014   00190E  0012               	return		;funcret
  2015   001910                     __end_of___wmul:
  2016                           	callstack 0
  2017                           
  2018 ;; *************** function _LCD_ShowString *****************
  2019 ;; Defined at:
  2020 ;;		line 55 in file "lcd.c"
  2021 ;; Parameters:    Size  Location     Type
  2022 ;;  lineNum         1    wreg     unsigned char 
  2023 ;;  textData        1    1[COMRAM] PTR unsigned char 
  2024 ;;		 -> moveDisplay@menuItem2(17), moveDisplay@menuItem1(17), 
  2025 ;; Auto vars:     Size  Location     Type
  2026 ;;  lineNum         1    2[COMRAM] unsigned char 
  2027 ;;  i               1    3[COMRAM] unsigned char 
  2028 ;; Return value:  Size  Location     Type
  2029 ;;                  1    wreg      void 
  2030 ;; Registers used:
  2031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2032 ;; Tracked objects:
  2033 ;;		On entry : 0/0
  2034 ;;		On exit  : 0/0
  2035 ;;		Unchanged: 0/0
  2036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2037 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2038 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2040 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2041 ;;Total ram usage:        3 bytes
  2042 ;; Hardware stack levels used: 1
  2043 ;; Hardware stack levels required when called: 1
  2044 ;; This function calls:
  2045 ;;		_LCD_Send
  2046 ;; This function is called by:
  2047 ;;		_moveDisplay
  2048 ;; This function uses a non-reentrant model
  2049 ;;
  2050                           
  2051                           	psect	text10
  2052   0017A2                     __ptext10:
  2053                           	callstack 0
  2054   0017A2                     _LCD_ShowString:
  2055                           	callstack 28
  2056                           
  2057                           ;incstack = 0
  2058                           ;LCD_ShowString@lineNum stored from wreg
  2059   0017A2  6E03               	movwf	LCD_ShowString@lineNum^0,c
  2060   0017A4                     
  2061                           ;lcd.c: 60:     SSP2CON2bits.SEN = 1;
  2062   0017A4  806B               	bsf	107,0,c	;volatile
  2063   0017A6                     l72:
  2064   0017A6  B06B               	btfsc	107,0,c	;volatile
  2065   0017A8  EFD8  F00B         	goto	u831
  2066   0017AC  EFDA  F00B         	goto	u830
  2067   0017B0                     u831:
  2068   0017B0  EFD3  F00B         	goto	l72
  2069   0017B4                     u830:
  2070   0017B4                     
  2071                           ;lcd.c: 62:     SSP2IF = 0;
  2072   0017B4  9EA4               	bcf	4004,7,c	;volatile
  2073   0017B6                     
  2074                           ;lcd.c: 64:     LCD_Send(0x7c);
  2075   0017B6  0E7C               	movlw	124
  2076   0017B8  EC88  F00C         	call	_LCD_Send
  2077                           
  2078                           ;lcd.c: 66:     LCD_Send(0x80);
  2079   0017BC  0E80               	movlw	128
  2080   0017BE  EC88  F00C         	call	_LCD_Send
  2081   0017C2                     
  2082                           ;lcd.c: 68:     if(lineNum == 1){
  2083   0017C2  0403               	decf	LCD_ShowString@lineNum^0,w,c
  2084   0017C4  A4D8               	btfss	status,2,c
  2085   0017C6  EFE7  F00B         	goto	u841
  2086   0017CA  EFE9  F00B         	goto	u840
  2087   0017CE                     u841:
  2088   0017CE  EFEE  F00B         	goto	l1564
  2089   0017D2                     u840:
  2090   0017D2                     
  2091                           ;lcd.c: 69:         LCD_Send(0x80);
  2092   0017D2  0E80               	movlw	128
  2093   0017D4  EC88  F00C         	call	_LCD_Send
  2094                           
  2095                           ;lcd.c: 70:     }
  2096   0017D8  EFFA  F00B         	goto	l76
  2097   0017DC                     l1564:
  2098   0017DC  0E02               	movlw	2
  2099   0017DE  1803               	xorwf	LCD_ShowString@lineNum^0,w,c
  2100   0017E0  A4D8               	btfss	status,2,c
  2101   0017E2  EFF5  F00B         	goto	u851
  2102   0017E6  EFF7  F00B         	goto	u850
  2103   0017EA                     u851:
  2104   0017EA  EFFA  F00B         	goto	l76
  2105   0017EE                     u850:
  2106   0017EE                     
  2107                           ;lcd.c: 72:         LCD_Send(0xC0);
  2108   0017EE  0EC0               	movlw	192
  2109   0017F0  EC88  F00C         	call	_LCD_Send
  2110   0017F4                     l76:
  2111                           
  2112                           ;lcd.c: 75:     LCD_Send(0x40);
  2113   0017F4  0E40               	movlw	64
  2114   0017F6  EC88  F00C         	call	_LCD_Send
  2115   0017FA                     
  2116                           ;lcd.c: 77:     for (i = 0; i<16; i++){
  2117   0017FA  0E00               	movlw	0
  2118   0017FC  6E04               	movwf	LCD_ShowString@i^0,c
  2119   0017FE                     l1574:
  2120                           
  2121                           ;lcd.c: 78:         LCD_Send(textData[i]);
  2122   0017FE  5002               	movf	LCD_ShowString@textData^0,w,c
  2123   001800  2404               	addwf	LCD_ShowString@i^0,w,c
  2124   001802  6ED9               	movwf	fsr2l,c
  2125   001804  6ADA               	clrf	fsr2h,c
  2126   001806  50DF               	movf	indf2,w,c
  2127   001808  EC88  F00C         	call	_LCD_Send
  2128   00180C                     
  2129                           ;lcd.c: 79:     }
  2130   00180C  2A04               	incf	LCD_ShowString@i^0,f,c
  2131   00180E  0E0F               	movlw	15
  2132   001810  6404               	cpfsgt	LCD_ShowString@i^0,c
  2133   001812  EF0D  F00C         	goto	u861
  2134   001816  EF0F  F00C         	goto	u860
  2135   00181A                     u861:
  2136   00181A  EFFF  F00B         	goto	l1574
  2137   00181E                     u860:
  2138   00181E                     
  2139                           ;lcd.c: 81:     SSP2CON2bits.PEN = 1;
  2140   00181E  846B               	bsf	107,2,c	;volatile
  2141   001820                     l80:
  2142   001820  B46B               	btfsc	107,2,c	;volatile
  2143   001822  EF15  F00C         	goto	u871
  2144   001826  EF17  F00C         	goto	u870
  2145   00182A                     u871:
  2146   00182A  EF10  F00C         	goto	l80
  2147   00182E                     u870:
  2148   00182E  0012               	return		;funcret
  2149   001830                     __end_of_LCD_ShowString:
  2150                           	callstack 0
  2151                           
  2152 ;; *************** function _LCD_Init *****************
  2153 ;; Defined at:
  2154 ;;		line 3 in file "lcd.c"
  2155 ;; Parameters:    Size  Location     Type
  2156 ;;		None
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;		None
  2159 ;; Return value:  Size  Location     Type
  2160 ;;                  1    wreg      void 
  2161 ;; Registers used:
  2162 ;;		wreg, status,2, cstack
  2163 ;; Tracked objects:
  2164 ;;		On entry : 0/0
  2165 ;;		On exit  : 0/0
  2166 ;;		Unchanged: 0/0
  2167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2170 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2171 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2172 ;;Total ram usage:        1 bytes
  2173 ;; Hardware stack levels used: 1
  2174 ;; Hardware stack levels required when called: 1
  2175 ;; This function calls:
  2176 ;;		_LCD_Send
  2177 ;; This function is called by:
  2178 ;;		_main
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           	psect	text11
  2183   0014A0                     __ptext11:
  2184                           	callstack 0
  2185   0014A0                     _LCD_Init:
  2186                           	callstack 29
  2187   0014A0                     
  2188                           ;lcd.c: 5:     ANSELDbits.ANSD0 = 0;
  2189   0014A0  010F               	movlb	15	; () banked
  2190   0014A2  913B               	bcf	59,0,b	;volatile
  2191                           
  2192                           ;lcd.c: 6:     ANSELDbits.ANSD1 = 0;
  2193   0014A4  933B               	bcf	59,1,b	;volatile
  2194                           
  2195                           ;lcd.c: 8:     TRISDbits.TRISD0 = 1;
  2196   0014A6  8095               	bsf	149,0,c	;volatile
  2197                           
  2198                           ;lcd.c: 9:     TRISDbits.TRISD1 = 1;
  2199   0014A8  8295               	bsf	149,1,c	;volatile
  2200                           
  2201                           ;lcd.c: 10:     TRISAbits.TRISA0 = 0;
  2202   0014AA  9092               	bcf	146,0,c	;volatile
  2203                           
  2204                           ;lcd.c: 11:     LATAbits.LATA0 = 1;
  2205   0014AC  8089               	bsf	137,0,c	;volatile
  2206   0014AE                     
  2207                           ; BSR set to: 15
  2208                           ;lcd.c: 14:     SSP2CON1bits.SSPM = 0b1000;
  2209   0014AE  506C               	movf	108,w,c	;volatile
  2210   0014B0  0BF0               	andlw	-16
  2211   0014B2  0908               	iorlw	8
  2212   0014B4  6E6C               	movwf	108,c	;volatile
  2213                           
  2214                           ;lcd.c: 15:     SSP2ADD = 19;
  2215   0014B6  0E13               	movlw	19
  2216   0014B8  6E6E               	movwf	110,c	;volatile
  2217   0014BA                     
  2218                           ; BSR set to: 15
  2219                           ;lcd.c: 16:     SSP2CON1bits.SSPEN = 1;
  2220   0014BA  8A6C               	bsf	108,5,c	;volatile
  2221   0014BC                     
  2222                           ; BSR set to: 15
  2223                           ;lcd.c: 18:     _delay((unsigned long)((5)*(32E6/4000.0)));
  2224   0014BC  0E34               	movlw	52
  2225   0014BE  6E02               	movwf	??_LCD_Init^0,c
  2226   0014C0  0EF2               	movlw	242
  2227   0014C2                     u1037:
  2228   0014C2  2EE8               	decfsz	wreg,f,c
  2229   0014C4  D7FE               	bra	u1037
  2230   0014C6  2E02               	decfsz	??_LCD_Init^0,f,c
  2231   0014C8  D7FC               	bra	u1037
  2232   0014CA                     
  2233                           ;lcd.c: 20:     SSP2CON2bits.SEN = 1;
  2234   0014CA  806B               	bsf	107,0,c	;volatile
  2235   0014CC                     l63:
  2236   0014CC  B06B               	btfsc	107,0,c	;volatile
  2237   0014CE  EF6B  F00A         	goto	u881
  2238   0014D2  EF6D  F00A         	goto	u880
  2239   0014D6                     u881:
  2240   0014D6  EF66  F00A         	goto	l63
  2241   0014DA                     u880:
  2242   0014DA                     
  2243                           ;lcd.c: 22:     SSP2IF = 0;
  2244   0014DA  9EA4               	bcf	4004,7,c	;volatile
  2245   0014DC                     
  2246                           ;lcd.c: 27:     LCD_Send(0x7C);
  2247   0014DC  0E7C               	movlw	124
  2248   0014DE  EC88  F00C         	call	_LCD_Send
  2249                           
  2250                           ;lcd.c: 28:     LCD_Send(0x80);
  2251   0014E2  0E80               	movlw	128
  2252   0014E4  EC88  F00C         	call	_LCD_Send
  2253                           
  2254                           ;lcd.c: 29:     LCD_Send(0x38);
  2255   0014E8  0E38               	movlw	56
  2256   0014EA  EC88  F00C         	call	_LCD_Send
  2257                           
  2258                           ;lcd.c: 30:     LCD_Send(0x80);
  2259   0014EE  0E80               	movlw	128
  2260   0014F0  EC88  F00C         	call	_LCD_Send
  2261                           
  2262                           ;lcd.c: 31:     LCD_Send(0x39);
  2263   0014F4  0E39               	movlw	57
  2264   0014F6  EC88  F00C         	call	_LCD_Send
  2265                           
  2266                           ;lcd.c: 32:     LCD_Send(0x80);
  2267   0014FA  0E80               	movlw	128
  2268   0014FC  EC88  F00C         	call	_LCD_Send
  2269                           
  2270                           ;lcd.c: 33:     LCD_Send(0x17);
  2271   001500  0E17               	movlw	23
  2272   001502  EC88  F00C         	call	_LCD_Send
  2273                           
  2274                           ;lcd.c: 34:     LCD_Send(0x80);
  2275   001506  0E80               	movlw	128
  2276   001508  EC88  F00C         	call	_LCD_Send
  2277                           
  2278                           ;lcd.c: 35:     LCD_Send(0x7A);
  2279   00150C  0E7A               	movlw	122
  2280   00150E  EC88  F00C         	call	_LCD_Send
  2281                           
  2282                           ;lcd.c: 36:     LCD_Send(0x80);
  2283   001512  0E80               	movlw	128
  2284   001514  EC88  F00C         	call	_LCD_Send
  2285                           
  2286                           ;lcd.c: 37:     LCD_Send(0x5E);
  2287   001518  0E5E               	movlw	94
  2288   00151A  EC88  F00C         	call	_LCD_Send
  2289                           
  2290                           ;lcd.c: 38:     LCD_Send(0x80);
  2291   00151E  0E80               	movlw	128
  2292   001520  EC88  F00C         	call	_LCD_Send
  2293                           
  2294                           ;lcd.c: 39:     LCD_Send(0x6B);
  2295   001524  0E6B               	movlw	107
  2296   001526  EC88  F00C         	call	_LCD_Send
  2297                           
  2298                           ;lcd.c: 40:     LCD_Send(0x80);
  2299   00152A  0E80               	movlw	128
  2300   00152C  EC88  F00C         	call	_LCD_Send
  2301                           
  2302                           ;lcd.c: 41:     LCD_Send(0x0C);
  2303   001530  0E0C               	movlw	12
  2304   001532  EC88  F00C         	call	_LCD_Send
  2305                           
  2306                           ;lcd.c: 42:     LCD_Send(0x80);
  2307   001536  0E80               	movlw	128
  2308   001538  EC88  F00C         	call	_LCD_Send
  2309                           
  2310                           ;lcd.c: 43:     LCD_Send(0x01);
  2311   00153C  0E01               	movlw	1
  2312   00153E  EC88  F00C         	call	_LCD_Send
  2313                           
  2314                           ;lcd.c: 44:     LCD_Send(0x80);
  2315   001542  0E80               	movlw	128
  2316   001544  EC88  F00C         	call	_LCD_Send
  2317                           
  2318                           ;lcd.c: 45:     LCD_Send(0x06);
  2319   001548  0E06               	movlw	6
  2320   00154A  EC88  F00C         	call	_LCD_Send
  2321                           
  2322                           ;lcd.c: 46:     LCD_Send(0x80);
  2323   00154E  0E80               	movlw	128
  2324   001550  EC88  F00C         	call	_LCD_Send
  2325                           
  2326                           ;lcd.c: 47:     LCD_Send(0x02);
  2327   001554  0E02               	movlw	2
  2328   001556  EC88  F00C         	call	_LCD_Send
  2329   00155A                     
  2330                           ;lcd.c: 49:     SSP2CON2bits.PEN = 1;
  2331   00155A  846B               	bsf	107,2,c	;volatile
  2332   00155C                     l66:
  2333   00155C  B46B               	btfsc	107,2,c	;volatile
  2334   00155E  EFB3  F00A         	goto	u891
  2335   001562  EFB5  F00A         	goto	u890
  2336   001566                     u891:
  2337   001566  EFAE  F00A         	goto	l66
  2338   00156A                     u890:
  2339   00156A                     
  2340                           ;lcd.c: 52:     _delay((unsigned long)((5)*(32E6/4000.0)));
  2341   00156A  0E34               	movlw	52
  2342   00156C  6E02               	movwf	??_LCD_Init^0,c
  2343   00156E  0EF2               	movlw	242
  2344   001570                     u1047:
  2345   001570  2EE8               	decfsz	wreg,f,c
  2346   001572  D7FE               	bra	u1047
  2347   001574  2E02               	decfsz	??_LCD_Init^0,f,c
  2348   001576  D7FC               	bra	u1047
  2349   001578  0012               	return		;funcret
  2350   00157A                     __end_of_LCD_Init:
  2351                           	callstack 0
  2352                           
  2353 ;; *************** function _LCD_Send *****************
  2354 ;; Defined at:
  2355 ;;		line 85 in file "lcd.c"
  2356 ;; Parameters:    Size  Location     Type
  2357 ;;  data            1    wreg     unsigned char 
  2358 ;; Auto vars:     Size  Location     Type
  2359 ;;  data            1    0[COMRAM] unsigned char 
  2360 ;; Return value:  Size  Location     Type
  2361 ;;                  1    wreg      void 
  2362 ;; Registers used:
  2363 ;;		wreg
  2364 ;; Tracked objects:
  2365 ;;		On entry : 0/0
  2366 ;;		On exit  : 0/0
  2367 ;;		Unchanged: 0/0
  2368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2370 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2372 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2373 ;;Total ram usage:        1 bytes
  2374 ;; Hardware stack levels used: 1
  2375 ;; This function calls:
  2376 ;;		Nothing
  2377 ;; This function is called by:
  2378 ;;		_LCD_Init
  2379 ;;		_LCD_ShowString
  2380 ;;		_LCD_Clear
  2381 ;; This function uses a non-reentrant model
  2382 ;;
  2383                           
  2384                           	psect	text12
  2385   001910                     __ptext12:
  2386                           	callstack 0
  2387   001910                     _LCD_Send:
  2388                           	callstack 28
  2389                           
  2390                           ;incstack = 0
  2391                           ;LCD_Send@data stored from wreg
  2392   001910  6E01               	movwf	LCD_Send@data^0,c
  2393   001912                     
  2394                           ;lcd.c: 87:     SSP2BUF = data;
  2395   001912  C001  FF6F         	movff	LCD_Send@data,3951	;volatile
  2396   001916                     l86:
  2397   001916  B06D               	btfsc	109,0,c	;volatile
  2398   001918  EF90  F00C         	goto	u801
  2399   00191C  EF92  F00C         	goto	u800
  2400   001920                     u801:
  2401   001920  EF8B  F00C         	goto	l86
  2402   001924                     u800:
  2403   001924                     l89:
  2404   001924  AEA4               	btfss	4004,7,c	;volatile
  2405   001926  EF97  F00C         	goto	u811
  2406   00192A  EF99  F00C         	goto	u810
  2407   00192E                     u811:
  2408   00192E  EF92  F00C         	goto	l89
  2409   001932                     u810:
  2410   001932                     
  2411                           ;lcd.c: 90:     SSP2IF = 0;
  2412   001932  9EA4               	bcf	4004,7,c	;volatile
  2413   001934  0012               	return		;funcret
  2414   001936                     __end_of_LCD_Send:
  2415                           	callstack 0
  2416                           
  2417                           	psect	rparam
  2418   000000                     
  2419                           	psect	config
  2420                           
  2421                           ; Padding undefined space
  2422   300000                     	org	3145728
  2423   300000  FF                 	db	255
  2424                           
  2425                           ;Config register CONFIG1H @ 0x300001
  2426                           ;	Oscillator Selection bits
  2427                           ;	FOSC = HSMP, HS oscillator (medium power 4-16 MHz)
  2428                           ;	4X PLL Enable
  2429                           ;	PLLCFG = ON, Oscillator multiplied by 4
  2430                           ;	Primary clock enable bit
  2431                           ;	PRICLKEN = 0x1, unprogrammed default
  2432                           ;	Fail-Safe Clock Monitor Enable bit
  2433                           ;	FCMEN = 0x0, unprogrammed default
  2434                           ;	Internal/External Oscillator Switchover bit
  2435                           ;	IESO = 0x0, unprogrammed default
  2436   300001                     	org	3145729
  2437   300001  33                 	db	51
  2438                           
  2439                           ;Config register CONFIG2L @ 0x300002
  2440                           ;	unspecified, using default values
  2441                           ;	Power-up Timer Enable bit
  2442                           ;	PWRTEN = 0x1, unprogrammed default
  2443                           ;	Brown-out Reset Enable bits
  2444                           ;	BOREN = 0x3, unprogrammed default
  2445                           ;	Brown Out Reset Voltage bits
  2446                           ;	BORV = 0x3, unprogrammed default
  2447   300002                     	org	3145730
  2448   300002  1F                 	db	31
  2449                           
  2450                           ;Config register CONFIG2H @ 0x300003
  2451                           ;	Watchdog Timer Enable bits
  2452                           ;	WDTEN = OFF, Watch dog timer is always disabled. SWDTEN has no effect.
  2453                           ;	Watchdog Timer Postscale Select bits
  2454                           ;	WDTPS = 0xF, unprogrammed default
  2455   300003                     	org	3145731
  2456   300003  3C                 	db	60
  2457                           tosu	equ	0xFFF
  2458                           tosh	equ	0xFFE
  2459                           tosl	equ	0xFFD
  2460                           stkptr	equ	0xFFC
  2461                           pclatu	equ	0xFFB
  2462                           pclath	equ	0xFFA
  2463                           pcl	equ	0xFF9
  2464                           tblptru	equ	0xFF8
  2465                           tblptrh	equ	0xFF7
  2466                           tblptrl	equ	0xFF6
  2467                           tablat	equ	0xFF5
  2468                           prodh	equ	0xFF4
  2469                           prodl	equ	0xFF3
  2470                           indf0	equ	0xFEF
  2471                           postinc0	equ	0xFEE
  2472                           postdec0	equ	0xFED
  2473                           preinc0	equ	0xFEC
  2474                           plusw0	equ	0xFEB
  2475                           fsr0h	equ	0xFEA
  2476                           fsr0l	equ	0xFE9
  2477                           wreg	equ	0xFE8
  2478                           indf1	equ	0xFE7
  2479                           postinc1	equ	0xFE6
  2480                           postdec1	equ	0xFE5
  2481                           preinc1	equ	0xFE4
  2482                           plusw1	equ	0xFE3
  2483                           fsr1h	equ	0xFE2
  2484                           fsr1l	equ	0xFE1
  2485                           bsr	equ	0xFE0
  2486                           indf2	equ	0xFDF
  2487                           postinc2	equ	0xFDE
  2488                           postdec2	equ	0xFDD
  2489                           preinc2	equ	0xFDC
  2490                           plusw2	equ	0xFDB
  2491                           fsr2h	equ	0xFDA
  2492                           fsr2l	equ	0xFD9
  2493                           status	equ	0xFD8

Data Sizes:
    Strings     51
    Constant    64
    Data        8
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     60      81
    BANK0           160     43      75
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 12
		 -> sprintf@f(COMRAM[12]), NULL(NULL[0]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    LCD_ShowString@textData	PTR unsigned char  size(1) Largest target is 17
		 -> moveDisplay@menuItem1(BANK0[17]), moveDisplay@menuItem2(BANK0[17]), 

    moveDisplay$2698	PTR unsigned char  size(1) Largest target is 6
		 -> STR_2(CODE[5]), STR_3(CODE[5]), STR_4(CODE[4]), STR_5(CODE[4]), 
		 -> STR_6(CODE[4]), STR_7(CODE[5]), STR_8(CODE[6]), STR_9(CODE[1]), 

    moveDisplay@F6949	PTR unsigned char [8] size(1) Largest target is 6
		 -> STR_2(CODE[5]), STR_3(CODE[5]), STR_4(CODE[4]), STR_5(CODE[4]), 
		 -> STR_6(CODE[4]), STR_7(CODE[5]), STR_8(CODE[6]), STR_9(CODE[1]), 

    moveDisplay@menuItems	PTR unsigned char [8] size(1) Largest target is 6
		 -> STR_2(CODE[5]), STR_3(CODE[5]), STR_4(CODE[4]), STR_5(CODE[4]), 
		 -> STR_6(CODE[4]), STR_7(CODE[5]), STR_8(CODE[6]), STR_9(CODE[1]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> printf@ap(COMRAM[1]), sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    S2270$buffer	PTR unsigned char  size(2) Largest target is 0

    S2270$source	PTR const unsigned char  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMRAM[2]), ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_10(CODE[6]), STR_11(CODE[5]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 17
		 -> moveDisplay@menuItem1(BANK0[17]), moveDisplay@menuItem2(BANK0[17]), 

    stoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> ?_printf(COMRAM[2]), ?_sprintf(COMRAM[2]), STR_12(CODE[7]), STR_2(CODE[5]), 
		 -> STR_3(CODE[5]), STR_4(CODE[4]), STR_5(CODE[4]), STR_6(CODE[4]), 
		 -> STR_7(CODE[5]), STR_8(CODE[6]), STR_9(CODE[1]), 

    stoa@fp	PTR struct _IO_FILE size(2) Largest target is 12
		 -> sprintf@f(COMRAM[12]), NULL(NULL[0]), 

    stoa@s	PTR unsigned char  size(2) Largest target is 6
		 -> ?_printf(COMRAM[2]), ?_sprintf(COMRAM[2]), STR_2(CODE[5]), STR_3(CODE[5]), 
		 -> STR_4(CODE[4]), STR_5(CODE[4]), STR_6(CODE[4]), STR_7(CODE[5]), 
		 -> STR_8(CODE[6]), STR_9(CODE[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(COMRAM[1]), sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 12
		 -> sprintf@f(COMRAM[12]), NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(COMRAM[1]), sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 6
		 -> STR_1(CODE[5]), STR_10(CODE[6]), STR_11(CODE[5]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_1(CODE[5]), STR_10(CODE[6]), STR_11(CODE[5]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 12
		 -> sprintf@f(COMRAM[12]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_moveDisplay
    _moveDisplay->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_stoa
    _stoa->_fputc
    _fputc->_putch
    _read_prec_or_width->___wmul
    _LCD_ShowString->_LCD_Send
    _LCD_Init->_LCD_Send

Critical Paths under _main in BANK0

    _main->_moveDisplay

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    6172
                                             57 COMRAM     3     3      0
                           _LCD_Init
                        _moveDisplay
 ---------------------------------------------------------------------------------
 (1) _moveDisplay                                         46    45      1    6081
                                             54 COMRAM     3     2      1
                                              0 BANK0     43    43      0
                     _LCD_ShowString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6    5265
                                             35 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             5     1      4    4760
                                             30 COMRAM     5     1      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           10     6      4    4207
                                             24 COMRAM     6     2      4
                              _fputc
                 _read_prec_or_width
                               _stoa
 ---------------------------------------------------------------------------------
 (5) _stoa                                                14    10      4    1583
                                             10 COMRAM    14    10      4
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                9     5      4    1108
                                              1 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2     843
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     511
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _LCD_ShowString                                       3     2      1     309
                                              1 COMRAM     3     2      1
                           _LCD_Send
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0      22
                                              1 COMRAM     1     1      0
                           _LCD_Send
 ---------------------------------------------------------------------------------
 (3) _LCD_Send                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCD_Send
   _moveDisplay
     _LCD_ShowString
       _LCD_Send
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _fputc
             _putch
           _read_prec_or_width
             ___wmul
           _stoa
             _fputc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      53        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      34        0.0%
BANK14             100      0       0      32        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2B      4B       5       46.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     3C      51       1       85.3%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITBIGSFRhhhh       36      0       0      37        0.0%
BITBIGSFRllllhl     2F      0       0      51        0.0%
BITBIGSFRhhllh      10      0       0      42        0.0%
BITBIGSFRllllhh     10      0       0      50        0.0%
BITBIGSFRhll         8      0       0      46        0.0%
BITBIGSFRllhh        7      0       0      47        0.0%
BITBIGSFRhhllll      6      0       0      44        0.0%
BITBIGSFRllhl        6      0       0      48        0.0%
BITBIGSFRhlh         5      0       0      45        0.0%
BITBIGSFRhhlhhh      1      0       0      39        0.0%
BITBIGSFRhhlllh      1      0       0      43        0.0%
BITBIGSFRhhlhhl      1      0       0      40        0.0%
BITBIGSFRhhlhl       1      0       0      41        0.0%
BITBIGSFRhhhl        1      0       0      38        0.0%
BITBIGSFRlllh        1      0       0      49        0.0%
BITBIGSFRlllll       1      0       0      52        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9C      33        0.0%
DATA                 0      0      9C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Sun Apr 28 00:07:03 2024

                        _C0 102D                          _C1 1029                          _C2 1025  
                        _C3 1021                          l32 1638                          l24 15CE  
                        l29 161C                          l63 14CC                          l80 1820  
                        l72 17A6                          l65 14DA                          l66 155C  
                        l74 17B4                          l91 1932                          l83 182E  
                        _S1 100D                          l92 1934                          l76 17F4  
                        _S2 1009                          l69 1578                          _S3 1005  
                        l86 1916                          _S4 1001                          l79 181E  
                        l89 1924         ___wmul@multiplicand 0003                         l205 149E  
                       l208 190E                         l186 1938                         l189 194A  
                       l923 1372                         l932 1798                         l916 12C2  
                       l936 17A0                         l928 13BA                         l952 124C  
                       l970 16FA                         l958 18B2                         l886 18E8  
                       u600 16C4                         u601 16C0                         u610 1268  
                       u611 1264                         u700 1726                         u620 12B2  
                       u701 1722                         u710 1798                         u630 12C2  
                       u711 1794                         u631 12BE                         u800 1924  
                       u560 1946                         u640 12E0                         u720 1098  
                       u801 1920                         u561 1942                         u641 12DC  
                       u721 1094                         u810 1932                         u570 1654  
                       u650 131A                         u730 10FC                         u811 192E  
                       u571 1650                         u651 1316                         u627 12A8  
                       u731 10F8                         u580 1666                         u660 1340  
                       u740 111E                         u820 18AA                         u581 1662  
                       u741 111A                         u821 18A6                         u901 13CA  
                       u830 17B4                         u590 168E                         u670 1372  
                       u750 114E                         u910 13E8                         u831 17B0  
                       u591 168A                         u671 136E                         u751 114A  
                       u911 13E4                         u840 17D2                         u680 1380  
                       u760 1180                         u920 1400                         u841 17CE  
                       u681 137C                         u761 117C                         u921 13FC  
                       u850 17EE                         u690 13BA                         u770 11AA  
                       u930 15A8                         u851 17EA                         u691 13B6  
                       u667 1336                         u771 11A6                         u931 15A4  
                       u860 181E                         u780 11D4                         u940 15CE  
                       u861 181A                         u781 11D0                         u941 15CA  
                       u870 182E                         u790 11F2                         u950 15DC  
                       u871 182A                         u791 11EE                         u951 15D8  
                       u880 14DA                         u960 15F6                         u881 14D6  
                       u961 15F2                         u890 156A                         u970 161C  
                       u891 1566                         u971 1618                         u980 162A  
                       u981 1626                         wreg 0FE8                  _TXSTA1bits 0FAC  
                      l1410 1938                        l1412 1946                        l1420 1642  
                      l1500 10EC                        l1414 18EA                        l1430 16C4  
                      l1422 1654                        l1510 112C                        l1502 10FC  
                      l1600 14CA                        l1416 1906                        l1424 1666  
                      l1440 1280                        l1520 11AA                        l1512 114E  
                      l1504 1110                        l1602 14DC                        l1426 1670  
                      l1450 12FC                        l1442 1284                        l1434 124E  
                      l1522 11D4                        l1514 1156                        l1506 111E  
                      l1610 13D6                        l1604 155A                        l1428 168E  
                      l1460 1384                        l1452 131E                        l1436 1268  
                      l1532 121A                        l1516 115E                        l1508 1128  
                      l1612 13E8                        l1620 1406                        l1542 1912  
                      l1606 156A                        l1470 1726                        l1462 1398  
                      l1454 1354                        l1446 12E4                        l1438 1274  
                      l1518 1180                        l1526 11E2                        l1550 18AA  
                      l1614 13EE                        l1622 1424                        l1560 17C2  
                      l1472 172E                        l1464 139C                        l1448 12F8  
                      l1456 1358                        l1528 11F2                        l1536 1226  
                      l1480 1076                        l1544 1872                        l1624 1486  
                      l1616 1400                        l1608 13C0                        l1640 159A  
                      l1632 157A                        l1562 17D2                        l1554 17A4  
                      l1474 174A                        l1466 16FC                        l1490 10B8  
                      l1482 1098                        l1546 187A                        l1626 1490  
                      l1642 15A8                        l1650 15E8                        l1634 1588  
                      l1564 17DC                        l1556 17A4                        l1476 176A  
                      l1468 1704                        l1492 10BA                        l1484 10A0  
                      l1548 188E                        l1580 18B4                        l1628 149A  
                      l1652 15F6                        l1660 1636                        l1644 15C0  
                      l1636 158C                        l1574 17FE                        l1566 17EE  
                      l1558 17B6                        l1478 1772                        l1494 10C6  
                      l1486 10AC                        l1582 18BC                        l1654 160E  
                      l1638 1590                        l1592 14A0                        l1576 180C  
                      l1568 17FA                        l1488 10B0                        l1584 18C4  
                      l1648 15DC                        l1594 14AE                        l1578 180E  
                      l1498 10CE                        l1586 18CC                        l1658 162A  
                      l1596 14BA                        l1588 18DE                        l1598 14BC  
                      STR_1 1063                        STR_2 1059                        STR_3 105E  
                      STR_4 1070                        STR_5 106C                        STR_6 1068  
                      STR_7 1054                        STR_8 1048                        STR_9 1067  
                      u1017 15B2                        u1027 1600                        u1037 14C2  
                      u1047 1570                        _dbuf 008B                        _half 101D  
                      _main 157A                        _prec 0047                        fsr0h 0FEA  
                      fsr1h 0FE2                        indf0 0FEF                        fsr2h 0FDA  
                      fsr0l 0FE9                        indf2 0FDF                        fsr1l 0FE1  
                      fsr2l 0FD9                        _stoa 124E                        prodh 0FF4  
                      prodl 0FF3                        start 0000                ___param_bank 0000  
            _LCD_ShowString 17A2            __end_of_LCD_Init 157A            __end_of_LCD_Send 1936  
                     ?_main 0001                       STR_10 104E                       STR_11 104F  
                     STR_12 1041                       ?_stoa 000B                vfpfcnvrt@fmt 001B  
                     _TX1IF 7CF4             __end_of_pio2_1t 1015                       _flags 0049  
       read_prec_or_width@c 0009         read_prec_or_width@n 000A                       _fputc 1642  
                     _width 0045             __end_of_invpio2 101D                       _putch 1936  
                     tablat 0FF5                       plusw1 0FE3                       plusw2 0FDB  
                     stoa@l 0017                       stoa@p 0011                       stoa@s 000D  
                     stoa@w 0013                       status 0FD8             __end_of_sprintf 18EA  
           __initialization 1830      __end_of_LCD_ShowString 1830                __end_of_half 1021  
              __end_of_main 1642                __end_of_stoa 13BC                LCD_Send@data 0001  
                    ??_main 003A                      ??_stoa 000F               __activetblptr 0002  
__end_of_read_prec_or_width 17A2                ?_moveDisplay 0037                      ?_fputc 0002  
                    _ADRESH 0FC4                      ?_putch 0001                      _GODONE 7E11  
             vfpfcnvrt@done 001E                      _SPBRG1 0FAF                      _SSP1IF 7CF3  
                    _SSP2IF 7D27                      _TXREG1 0FAD                vfprintf@cfmt 0023  
           ?_LCD_ShowString 0002                      _s1pio2 103D                      _s2pio2 1039  
                    _s3pio2 1035                      _s4pio2 1031                      ___wmul 18EA  
                    _pio2_1 1015        read_prec_or_width@ap 0008                      clear_0 1856  
                    clear_1 1862                      isa$std 0001                      fputc@c 0002  
              __pdataCOMRAM 004A                __mediumconst 0000                      tblptrh 0FF7  
                    tblptrl 0FF6                      tblptru 0FF8                      stoa@cp 0015  
                    stoa@fp 000B            __end_of_vfprintf 18B4                   ??_sprintf 002A  
                __accesstop 0060     __end_of__initialization 1868                   ?_LCD_Init 0001  
                 ?_LCD_Send 0001               ___rparam_used 0001              __pcstackCOMRAM 0001  
             __end_of_fputc 16FC               __end_of_putch 194C                  __end_of_C0 1031  
                __end_of_C1 102D                  __end_of_C2 1029                  __end_of_C3 1025  
                __end_of_S1 1011                  __end_of_S2 100D                  __end_of_S3 1009  
                __end_of_S4 1005                     ??_fputc 0006                     ??_putch 0001  
                __pbssBANK0 008B                  ??_LCD_Init 0002                  ??_LCD_Send 0001  
                   ?___wmul 0001                     _SSP2ADD 0F6E                     _SSP1BUF 0FC9  
                   _SSP2BUF 0F6F             LCD_ShowString@i 0004                     __Hparam 0000  
                   __Lparam 0000                   ?_vfprintf 001F                __psmallconst 1000  
                   __pcinit 1830                     __ramtop 1000                     __ptext0 157A  
                   __ptext1 13BC                     __ptext2 18B4                     __ptext3 1872  
                   __ptext4 1076                     __ptext5 124E                     __ptext6 1642  
                   __ptext7 1936                     __ptext8 16FC                     __ptext9 18EA  
                   _pio2_1t 1011       read_prec_or_width@fmt 0007                     _invpio2 1019  
                   _sprintf 18B4        end_of_initialization 1868                     fputc@fp 0004  
          ___rem_pio2f@F526 0041               __Lmediumconst 0000            ??_LCD_ShowString 0003  
        _read_prec_or_width 16FC       LCD_ShowString@lineNum 0003           __end_of_vfpfcnvrt 124E  
                   postdec1 0FE5                     postdec2 0FDD         ?_read_prec_or_width 0007  
                   postinc0 0FEE                     postinc1 0FE6                     postinc2 0FDE  
                ??_vfprintf 0023                   _PORTAbits 0F80                   _PORTCbits 0F82  
                 _TRISAbits 0F92                   _TRISBbits 0F93                   _TRISCbits 0F94  
                 _TRISDbits 0F95        ??_read_prec_or_width 0009              __end_of_s1pio2 1041  
            __end_of_s2pio2 103D              __end_of_s3pio2 1039              __end_of_s4pio2 1035  
               vfpfcnvrt@ap 001C                 vfpfcnvrt@fp 0019              __end_of___wmul 1910  
             __pidataCOMRAM 194C              __end_of_pio2_1 1019        moveDisplay@menuItem1 0060  
      moveDisplay@menuItem2 0071        moveDisplay@menuItems 0082         start_initialization 1830  
               vfprintf@fmt 0021                    ??___wmul 0005                 __pbssCOMRAM 003D  
             __pcstackBANK0 0060                   fabsf@F465 003D                 __smallconst 1000  
             ??_moveDisplay 0038                    ?_sprintf 0024                    _LCD_Init 14A0  
                  _LCD_Send 1910              ___wmul@product 0005                    _LATAbits 0F89  
                  _LATBbits 0F8A                   _vfpfcnvrt 1076                  _ADCON0bits 0FC2  
                _ADCON2bits 0FC0           ___wmul@multiplier 0001                   main@menuI 003C  
          moveDisplay@F6949 004A                   copy_data0 1844         __end_of_moveDisplay 14A0  
          moveDisplay@menuI 008A            moveDisplay@where 0037                    __Hrparam 0000  
                vfprintf@ap 0022                    __Lrparam 0000                  vfprintf@fp 001F  
                ?_vfpfcnvrt 0019                  _ANSELAbits 0F38                  _ANSELBbits 0F39  
                _ANSELDbits 0F3B                  sprintf@fmt 0025                    __ptext10 17A2  
                  __ptext11 14A0                    __ptext12 1910                _SSP1CON1bits 0FC6  
              _SSP2CON1bits 0F6C                _SSP2CON2bits 0F6B                    isa$xinst 0000  
                  _vfprintf 1872                _SSP1STATbits 0FC7                _SSP2STATbits 0F6D  
                 putch@data 0001                 _moveDisplay 13BC                   sprintf@ap 002A  
                _RCSTA1bits 0FAB                 ??_vfpfcnvrt 001D      LCD_ShowString@textData 0002  
                  sprintf@f 002B                    sprintf@s 0024  
